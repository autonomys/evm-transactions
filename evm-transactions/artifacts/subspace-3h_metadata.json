[
  1635018093,
  {
    "V15": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Nonce",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "flags",
                      "type": 7,
                      "typeName": "ExtraFlags"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ExtraFlags"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 9,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 9,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 9,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "compact": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 11,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 12,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 15,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "def": {
                "sequence": {
                  "type": 16
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 17,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "def": {
                "sequence": {
                  "type": 19
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 20
                },
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 68,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 20,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 69,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "subspace_runtime",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 21,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Subspace",
                      "fields": [
                        {
                          "type": 31,
                          "typeName": "pallet_subspace::Event<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "OffencesSubspace",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "pallet_offences_subspace::Event"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Rewards",
                      "fields": [
                        {
                          "type": 42,
                          "typeName": "pallet_rewards::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 43,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "TransactionFees",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "pallet_transaction_fees::Event<Runtime>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "pallet_utility::Event"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Domains",
                      "fields": [
                        {
                          "type": 50,
                          "typeName": "pallet_domains::Event<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 56,
                          "typeName": "orml_vesting::Event<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Messenger",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "pallet_messenger::Event<Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Transporter",
                      "fields": [
                        {
                          "type": 64,
                          "typeName": "pallet_transporter::Event<Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 100
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 25,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 22,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    },
                    {
                      "name": "UpgradeAuthorized",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        },
                        {
                          "name": "check_version",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "An upgrade was authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 24,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    },
                    {
                      "name": "RootNotAllowed",
                      "index": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 17,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FundsUnavailable",
                      "index": 0
                    },
                    {
                      "name": "OnlyProvider",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    },
                    {
                      "name": "CannotCreateHold",
                      "index": 7
                    },
                    {
                      "name": "NotExpendable",
                      "index": 8
                    },
                    {
                      "name": "Blocked",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 30,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 31,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "SegmentHeaderStored",
                      "fields": [
                        {
                          "name": "segment_header",
                          "type": 32,
                          "typeName": "SegmentHeader"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Segment header was stored in blockchain history."
                      ]
                    },
                    {
                      "name": "FarmerVote",
                      "fields": [
                        {
                          "name": "public_key",
                          "type": 38,
                          "typeName": "FarmerPublicKey"
                        },
                        {
                          "name": "reward_address",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "height",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        },
                        {
                          "name": "parent_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Farmer vote."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "subspace_core_primitives",
                "SegmentHeader"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "segment_index",
                          "type": 33,
                          "typeName": "SegmentIndex"
                        },
                        {
                          "name": "segment_commitment",
                          "type": 34,
                          "typeName": "SegmentCommitment"
                        },
                        {
                          "name": "prev_segment_header_hash",
                          "type": 1,
                          "typeName": "Blake3Hash"
                        },
                        {
                          "name": "last_archived_block",
                          "type": 36,
                          "typeName": "LastArchivedBlock"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "subspace_core_primitives",
                "segments",
                "SegmentIndex"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "subspace_core_primitives",
                "segments",
                "SegmentCommitment"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "[u8; SegmentCommitment::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 35,
            "type": {
              "def": {
                "array": {
                  "len": 48,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "path": [
                "subspace_core_primitives",
                "LastArchivedBlock"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "number",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "archived_progress",
                      "type": 37,
                      "typeName": "ArchivedBlockProgress"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "subspace_core_primitives",
                "ArchivedBlockProgress"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Complete",
                      "index": 0
                    },
                    {
                      "name": "Partial",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 39,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "pallet_offences_subspace",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Offence",
                      "fields": [
                        {
                          "name": "kind",
                          "type": 41,
                          "typeName": "Kind"
                        },
                        {
                          "name": "timeslot",
                          "type": 13,
                          "typeName": "OpaqueTimeSlot"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "There is an offence reported of the given `kind` happened at the `session_index` and",
                        "(kind-specific) time slot. This event is not deposited for duplicate slashes.",
                        "\\[kind, timeslot\\]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events type."
              ]
            }
          },
          {
            "id": 41,
            "type": {
              "def": {
                "array": {
                  "len": 16,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "pallet_rewards",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BlockReward",
                      "fields": [
                        {
                          "name": "block_author",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Issued reward for the block author"
                      ]
                    },
                    {
                      "name": "VoteReward",
                      "fields": [
                        {
                          "name": "voter",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Issued reward for the voter"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "`pallet-rewards` events"
              ]
            }
          },
          {
            "id": 43,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 44,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    },
                    {
                      "name": "Minted",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Some amount was minted into an account."
                      ]
                    },
                    {
                      "name": "Burned",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some amount was burned from an account."
                      ]
                    },
                    {
                      "name": "Suspended",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some amount was suspended from an account (it can be restored later)."
                      ]
                    },
                    {
                      "name": "Restored",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some amount was restored into an account."
                      ]
                    },
                    {
                      "name": "Upgraded",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "An account was upgraded."
                      ]
                    },
                    {
                      "name": "Issued",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 15,
                      "docs": [
                        "Total issuance was increased by `amount`, creating a credit to be balanced."
                      ]
                    },
                    {
                      "name": "Rescinded",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 16,
                      "docs": [
                        "Total issuance was decreased by `amount`, creating a debt to be balanced."
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 17,
                      "docs": [
                        "Some balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 18,
                      "docs": [
                        "Some balance was unlocked."
                      ]
                    },
                    {
                      "name": "Frozen",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 19,
                      "docs": [
                        "Some balance was frozen."
                      ]
                    },
                    {
                      "name": "Thawed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 20,
                      "docs": [
                        "Some balance was thawed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_transaction_fees",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BlockFees",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "Block author that received the fees."
                          ]
                        },
                        {
                          "name": "storage",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of collected storage fees."
                          ]
                        },
                        {
                          "name": "compute",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of collected compute fees."
                          ]
                        },
                        {
                          "name": "tips",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of collected tips."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Storage fees."
                      ]
                    },
                    {
                      "name": "BurnedBlockFees",
                      "fields": [
                        {
                          "name": "storage",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of burned storage fees."
                          ]
                        },
                        {
                          "name": "compute",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of burned compute fees."
                          ]
                        },
                        {
                          "name": "tips",
                          "type": 6,
                          "typeName": "BalanceOf<T>",
                          "docs": [
                            "Amount of burned tips."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Fees burned due to equivocated block author or rewards not enabled."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "`pallet-transaction-fees` events"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BatchInterrupted",
                      "fields": [
                        {
                          "name": "index",
                          "type": 4,
                          "typeName": "u32"
                        },
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Batch of dispatches did not complete fully. Index of first failing dispatch given, as",
                        "well as the error."
                      ]
                    },
                    {
                      "name": "BatchCompleted",
                      "index": 1,
                      "docs": [
                        "Batch of dispatches completed fully with no error."
                      ]
                    },
                    {
                      "name": "BatchCompletedWithErrors",
                      "index": 2,
                      "docs": [
                        "Batch of dispatches completed but has errors."
                      ]
                    },
                    {
                      "name": "ItemCompleted",
                      "index": 3,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with no error."
                      ]
                    },
                    {
                      "name": "ItemFailed",
                      "fields": [
                        {
                          "name": "error",
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "A single item within a Batch of dispatches has completed with error."
                      ]
                    },
                    {
                      "name": "DispatchedAs",
                      "fields": [
                        {
                          "name": "result",
                          "type": 48,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "A call was dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 49
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 49
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BundleStored",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "bundle_hash",
                          "type": 12,
                          "typeName": "H256"
                        },
                        {
                          "name": "bundle_author",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A domain bundle was included."
                      ]
                    },
                    {
                      "name": "DomainRuntimeCreated",
                      "fields": [
                        {
                          "name": "runtime_id",
                          "type": 4,
                          "typeName": "RuntimeId"
                        },
                        {
                          "name": "runtime_type",
                          "type": 52,
                          "typeName": "RuntimeType"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DomainRuntimeUpgradeScheduled",
                      "fields": [
                        {
                          "name": "runtime_id",
                          "type": 4,
                          "typeName": "RuntimeId"
                        },
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "BlockNumberFor<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "DomainRuntimeUpgraded",
                      "fields": [
                        {
                          "name": "runtime_id",
                          "type": 4,
                          "typeName": "RuntimeId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "OperatorRegistered",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "OperatorNominated",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "NominatorId<T>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "DomainInstantiated",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "OperatorSwitchedDomain",
                      "fields": [
                        {
                          "name": "old_domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "new_domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "OperatorDeregistered",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "OperatorUnlocked",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "WithdrewStake",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "NominatorId<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "FundsUnlocked",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "NominatorId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "PreferredOperator",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "NominatorId<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "OperatorRewarded",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "reward",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "OperatorTaxCollected",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "tax",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "DomainEpochCompleted",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "completed_epoch_index",
                          "type": 4,
                          "typeName": "EpochIndex"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "ForceDomainEpochTransition",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "completed_epoch_index",
                          "type": 4,
                          "typeName": "EpochIndex"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "FraudProofProcessed",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "new_head_receipt_number",
                          "type": 53,
                          "typeName": "Option<DomainBlockNumberFor<T>>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "DomainOperatorAllowListUpdated",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "OperatorSlashed",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "reason",
                          "type": 54,
                          "typeName": "SlashedReason<DomainBlockNumberFor<T>, ReceiptHashFor<T>>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "StorageFeeDeposited",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "NominatorId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 20
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 51,
            "type": {
              "path": [
                "sp_domains",
                "DomainId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "sp_domains",
                "RuntimeType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Evm",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "SlashedReason"
              ],
              "params": [
                {
                  "name": "DomainBlock",
                  "type": 4
                },
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidBundle",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "DomainBlock"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "BadExecutionReceipt",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "ReceiptHash"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "BundleEquivocation",
                      "fields": [
                        {
                          "type": 55,
                          "typeName": "Slot"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "path": [
                "sp_consensus_slots",
                "Slot"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "orml_vesting",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingScheduleAdded",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vesting_schedule",
                          "type": 57,
                          "typeName": "VestingScheduleOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Added new vesting schedule."
                      ]
                    },
                    {
                      "name": "Claimed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Claimed vesting."
                      ]
                    },
                    {
                      "name": "VestingSchedulesUpdated",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Updated vesting schedules."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "orml_vesting",
                "VestingSchedule"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "start",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period_count",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "per_period",
                      "type": 58,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 58,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "path": [
                "pallet_messenger",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ChannelInitiated",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Foreign chain id this channel connects to."
                          ]
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId",
                          "docs": [
                            "Channel ID of the said channel."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Emits when a channel between two chains is initiated."
                      ]
                    },
                    {
                      "name": "ChannelClosed",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Foreign chain id this channel connects to."
                          ]
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId",
                          "docs": [
                            "Channel ID of the said channel."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Emits when a channel between two chains is closed."
                      ]
                    },
                    {
                      "name": "ChannelOpen",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Foreign chain id this channel connects to."
                          ]
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId",
                          "docs": [
                            "Channel ID of the said channel."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Emits when a channel between two chain is open."
                      ]
                    },
                    {
                      "name": "OutboxMessage",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId"
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId"
                        },
                        {
                          "name": "nonce",
                          "type": 61,
                          "typeName": "Nonce"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Emits when a new message is added to the outbox."
                      ]
                    },
                    {
                      "name": "OutboxMessageResponse",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Destination chain ID."
                          ]
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId",
                          "docs": [
                            "Channel Is"
                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 61,
                          "typeName": "Nonce"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Emits when a message response is available for Outbox message."
                      ]
                    },
                    {
                      "name": "OutboxMessageResult",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId"
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId"
                        },
                        {
                          "name": "nonce",
                          "type": 61,
                          "typeName": "Nonce"
                        },
                        {
                          "name": "result",
                          "type": 63,
                          "typeName": "OutboxMessageResult"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Emits outbox message result."
                      ]
                    },
                    {
                      "name": "InboxMessage",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId"
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId"
                        },
                        {
                          "name": "nonce",
                          "type": 61,
                          "typeName": "Nonce"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Emits when a new inbox message is validated and added to Inbox."
                      ]
                    },
                    {
                      "name": "InboxMessageResponse",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Destination chain ID."
                          ]
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId",
                          "docs": [
                            "Channel Is"
                          ]
                        },
                        {
                          "name": "nonce",
                          "type": 61,
                          "typeName": "Nonce"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Emits when a message response is available for Inbox message."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "`pallet-messenger` events"
              ]
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "sp_domains",
                "ChainId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consensus",
                      "index": 0
                    },
                    {
                      "name": "Domain",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 61,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 62,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 11
                }
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "pallet_messenger",
                "OutboxMessageResult"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "DispatchError"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "pallet_transporter",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "OutgoingTransferInitiated",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Destination chain the transfer is bound to."
                          ]
                        },
                        {
                          "name": "message_id",
                          "type": 65,
                          "typeName": "MessageIdOf<T>",
                          "docs": [
                            "Id of the transfer."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Emits when there is a new outgoing transfer."
                      ]
                    },
                    {
                      "name": "OutgoingTransferFailed",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Destination chain the transfer is bound to."
                          ]
                        },
                        {
                          "name": "message_id",
                          "type": 65,
                          "typeName": "MessageIdOf<T>",
                          "docs": [
                            "Id of the transfer."
                          ]
                        },
                        {
                          "name": "err",
                          "type": 25,
                          "typeName": "DispatchError",
                          "docs": [
                            "Error from dst_chain endpoint."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Emits when a given outgoing transfer was failed on dst_chain."
                      ]
                    },
                    {
                      "name": "OutgoingTransferSuccessful",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Destination chain the transfer is bound to."
                          ]
                        },
                        {
                          "name": "message_id",
                          "type": 65,
                          "typeName": "MessageIdOf<T>",
                          "docs": [
                            "Id of the transfer."
                          ]
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Emits when a given outgoing transfer was successful."
                      ]
                    },
                    {
                      "name": "IncomingTransferSuccessful",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId",
                          "docs": [
                            "Source chain the transfer is coming from."
                          ]
                        },
                        {
                          "name": "message_id",
                          "type": 65,
                          "typeName": "MessageIdOf<T>",
                          "docs": [
                            "Id of the transfer."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Emits when a given incoming transfer was successfully processed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Events emitted by pallet-transporter."
              ]
            }
          },
          {
            "id": 65,
            "type": {
              "def": {
                "tuple": [
                  61,
                  61
                ]
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 48,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo call just took place."
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old",
                          "type": 67,
                          "typeName": "Option<T::AccountId>",
                          "docs": [
                            "The old sudo key (if one was previously set)."
                          ]
                        },
                        {
                          "name": "new",
                          "type": 0,
                          "typeName": "T::AccountId",
                          "docs": [
                            "The new sudo key (if one was set)."
                          ]
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The sudo key has been updated."
                      ]
                    },
                    {
                      "name": "KeyRemoved",
                      "index": 2,
                      "docs": [
                        "The key was permanently removed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 48,
                          "typeName": "DispatchResult",
                          "docs": [
                            "The result of the call made by the sudo user."
                          ]
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A [sudo_as](Pallet::sudo_as) call just took place."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Event` enum of this pallet"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 69,
            "type": {
              "def": {
                "sequence": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "def": {
                "sequence": {
                  "type": 71
                }
              }
            }
          },
          {
            "id": 71,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 73,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 74,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 73,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 75,
            "type": {
              "path": [
                "frame_system",
                "CodeUpgradeAuthorization"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "code_hash",
                      "type": 12,
                      "typeName": "T::Hash"
                    },
                    {
                      "name": "check_version",
                      "type": 30,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::remark`]."
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::set_heap_pages`]."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::set_code`]."
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::set_code_without_checks`]."
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 77,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::set_storage`]."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 79,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "See [`Pallet::kill_storage`]."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 13,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "See [`Pallet::kill_prefix`]."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "See [`Pallet::remark_with_event`]."
                      ]
                    },
                    {
                      "name": "authorize_upgrade",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "See [`Pallet::authorize_upgrade`]."
                      ]
                    },
                    {
                      "name": "authorize_upgrade_without_checks",
                      "fields": [
                        {
                          "name": "code_hash",
                          "type": 12,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "See [`Pallet::authorize_upgrade_without_checks`]."
                      ]
                    },
                    {
                      "name": "apply_authorized_upgrade",
                      "fields": [
                        {
                          "name": "code",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "See [`Pallet::apply_authorized_upgrade`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 77,
            "type": {
              "def": {
                "sequence": {
                  "type": 78
                }
              }
            }
          },
          {
            "id": 78,
            "type": {
              "def": {
                "tuple": [
                  13,
                  13
                ]
              }
            }
          },
          {
            "id": 79,
            "type": {
              "def": {
                "sequence": {
                  "type": 13
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 81,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 82
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 82,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 82,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 82,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 83,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 83,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 83,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 9
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 9
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 85,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 74,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 74,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 88,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "extrinsic_state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 89
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 89
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 89,
            "type": {
              "def": {
                "sequence": {
                  "type": 90
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "def": {
                "tuple": [
                  91,
                  4
                ]
              }
            }
          },
          {
            "id": 91,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    },
                    {
                      "name": "NothingAuthorized",
                      "index": 6,
                      "docs": [
                        "No upgrade authorized."
                      ]
                    },
                    {
                      "name": "Unauthorized",
                      "index": 7,
                      "docs": [
                        "The submitted code is not authorized."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 10,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::set`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_btree_map",
                "BoundedBTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 55
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 96,
                      "typeName": "BTreeMap<K, V>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 55
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 97
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "def": {
                "sequence": {
                  "type": 98
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "def": {
                "tuple": [
                  4,
                  55
                ]
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "NonZeroU32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "SolutionRanges"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "next",
                      "type": 101,
                      "typeName": "Option<u64>"
                    },
                    {
                      "name": "voting_current",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "voting_next",
                      "type": 101,
                      "typeName": "Option<u64>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 11
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 102,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "SolutionRangeOverride"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution_range",
                      "type": 11,
                      "typeName": "SolutionRange"
                    },
                    {
                      "name": "voting_solution_range",
                      "type": 11,
                      "typeName": "SolutionRange"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "pallet_subspace",
                "VoteVerificationData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "solution_range",
                      "type": 11,
                      "typeName": "SolutionRange"
                    },
                    {
                      "name": "vote_solution_range",
                      "type": 11,
                      "typeName": "SolutionRange"
                    },
                    {
                      "name": "current_slot",
                      "type": 55,
                      "typeName": "Slot"
                    },
                    {
                      "name": "parent_slot",
                      "type": 55,
                      "typeName": "Slot"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 104,
            "type": {
              "def": {
                "tuple": [
                  38,
                  92,
                  105,
                  106,
                  55
                ]
              }
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "subspace_core_primitives",
                "pieces",
                "PieceOffset"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 92,
                      "typeName": "u16"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "subspace_core_primitives",
                "crypto",
                "Scalar"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "inner",
                      "type": 1,
                      "typeName": "FsFr"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "def": {
                "tuple": [
                  38,
                  92,
                  105,
                  106,
                  55,
                  0
                ]
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 104
                },
                {
                  "name": "V",
                  "type": 109
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 113
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "def": {
                "tuple": [
                  0,
                  110
                ]
              }
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 111,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 112,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "def": {
                "sequence": {
                  "type": 114
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "def": {
                "tuple": [
                  104,
                  109
                ]
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 4
                },
                {
                  "name": "V",
                  "type": 116
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 118
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "PotEntropyValue"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_slot",
                      "type": 117,
                      "typeName": "Option<Slot>"
                    },
                    {
                      "name": "entropy",
                      "type": 1,
                      "typeName": "Blake3Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 55
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 55
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 118,
            "type": {
              "def": {
                "sequence": {
                  "type": 119
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "def": {
                "tuple": [
                  4,
                  116
                ]
              }
            }
          },
          {
            "id": 120,
            "type": {
              "path": [
                "subspace_core_primitives",
                "Randomness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; RANDOMNESS_LENGTH]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 122,
                          "typeName": "Box<EquivocationProof<HeaderFor<T>>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::report_equivocation`]."
                      ]
                    },
                    {
                      "name": "store_segment_headers",
                      "fields": [
                        {
                          "name": "segment_headers",
                          "type": 124,
                          "typeName": "Vec<SegmentHeader>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::store_segment_headers`]."
                      ]
                    },
                    {
                      "name": "enable_solution_range_adjustment",
                      "fields": [
                        {
                          "name": "solution_range_override",
                          "type": 101,
                          "typeName": "Option<u64>"
                        },
                        {
                          "name": "voting_solution_range_override",
                          "type": 101,
                          "typeName": "Option<u64>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::enable_solution_range_adjustment`]."
                      ]
                    },
                    {
                      "name": "vote",
                      "fields": [
                        {
                          "name": "signed_vote",
                          "type": 125,
                          "typeName": "Box<SignedVote<BlockNumberFor<T>, T::Hash, T::AccountId>>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::vote`]."
                      ]
                    },
                    {
                      "name": "enable_rewards_at",
                      "fields": [
                        {
                          "name": "enable_rewards_at",
                          "type": 136,
                          "typeName": "EnableRewardsAt<BlockNumberFor<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::enable_rewards_at`]."
                      ]
                    },
                    {
                      "name": "enable_authoring_by_anyone",
                      "index": 5,
                      "docs": [
                        "See [`Pallet::enable_authoring_by_anyone`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "sp_consensus_slots",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 123
                },
                {
                  "name": "Id",
                  "type": 38
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 38,
                      "typeName": "Id"
                    },
                    {
                      "name": "slot",
                      "type": 55,
                      "typeName": "Slot"
                    },
                    {
                      "name": "first_header",
                      "type": 123,
                      "typeName": "Header"
                    },
                    {
                      "name": "second_header",
                      "type": 123,
                      "typeName": "Header"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "header",
                "Header"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "parent_hash",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "number",
                      "type": 73,
                      "typeName": "Number"
                    },
                    {
                      "name": "state_root",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 12,
                      "typeName": "Hash::Output"
                    },
                    {
                      "name": "digest",
                      "type": 14,
                      "typeName": "Digest"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 124,
            "type": {
              "def": {
                "sequence": {
                  "type": 32
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "SignedVote"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "RewardAddress",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vote",
                      "type": 126,
                      "typeName": "Vote<Number, Hash, RewardAddress>"
                    },
                    {
                      "name": "signature",
                      "type": 110,
                      "typeName": "FarmerSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "Vote"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "RewardAddress",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "height",
                          "type": 4,
                          "typeName": "Number"
                        },
                        {
                          "name": "parent_hash",
                          "type": 12,
                          "typeName": "Hash"
                        },
                        {
                          "name": "slot",
                          "type": 55,
                          "typeName": "Slot"
                        },
                        {
                          "name": "solution",
                          "type": 127,
                          "typeName": "Solution<FarmerPublicKey, RewardAddress>"
                        },
                        {
                          "name": "proof_of_time",
                          "type": 135,
                          "typeName": "PotOutput"
                        },
                        {
                          "name": "future_proof_of_time",
                          "type": 135,
                          "typeName": "PotOutput"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "path": [
                "subspace_core_primitives",
                "Solution"
              ],
              "params": [
                {
                  "name": "PublicKey",
                  "type": 38
                },
                {
                  "name": "RewardAddress",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "public_key",
                      "type": 38,
                      "typeName": "PublicKey"
                    },
                    {
                      "name": "reward_address",
                      "type": 0,
                      "typeName": "RewardAddress"
                    },
                    {
                      "name": "sector_index",
                      "type": 92,
                      "typeName": "SectorIndex"
                    },
                    {
                      "name": "history_size",
                      "type": 128,
                      "typeName": "HistorySize"
                    },
                    {
                      "name": "piece_offset",
                      "type": 105,
                      "typeName": "PieceOffset"
                    },
                    {
                      "name": "record_commitment",
                      "type": 130,
                      "typeName": "RecordCommitment"
                    },
                    {
                      "name": "record_witness",
                      "type": 131,
                      "typeName": "RecordWitness"
                    },
                    {
                      "name": "chunk",
                      "type": 106,
                      "typeName": "Scalar"
                    },
                    {
                      "name": "chunk_witness",
                      "type": 132,
                      "typeName": "ChunkWitness"
                    },
                    {
                      "name": "proof_of_space",
                      "type": 133,
                      "typeName": "PosProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "path": [
                "subspace_core_primitives",
                "segments",
                "HistorySize"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 129,
                      "typeName": "NonZeroU64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "path": [
                "NonZeroU64"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "subspace_core_primitives",
                "pieces",
                "RecordCommitment"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "[u8; RecordCommitment::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "subspace_core_primitives",
                "pieces",
                "RecordWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "[u8; RecordWitness::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "subspace_core_primitives",
                "pieces",
                "ChunkWitness"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 35,
                      "typeName": "[u8; ChunkWitness::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 133,
            "type": {
              "path": [
                "subspace_core_primitives",
                "PosProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 134,
                      "typeName": "[u8; Self::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "def": {
                "array": {
                  "len": 160,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "subspace_core_primitives",
                "PotOutput"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 41,
                      "typeName": "[u8; Self::SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "EnableRewardsAt"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Height",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "Option<BlockNumber>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "SolutionRange",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Manually",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "def": {
                "tuple": [
                  11,
                  11
                ]
              }
            }
          },
          {
            "id": 138,
            "type": {
              "def": {
                "tuple": [
                  128,
                  128
                ]
              }
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "pallet_subspace",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 0,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    },
                    {
                      "name": "SolutionRangeAdjustmentAlreadyEnabled",
                      "index": 1,
                      "docs": [
                        "Solution range adjustment already enabled."
                      ]
                    },
                    {
                      "name": "RewardsAlreadyEnabled",
                      "index": 2,
                      "docs": [
                        "Rewards already active."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "offence",
                "OffenceDetails"
              ],
              "params": [
                {
                  "name": "Offender",
                  "type": 38
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "offender",
                      "type": 38,
                      "typeName": "Offender"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "def": {
                "tuple": [
                  41,
                  13
                ]
              }
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 143
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 144,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "pallet_rewards",
                "RewardPoint"
              ],
              "params": [
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "subsidy",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 144,
            "type": {
              "def": {
                "sequence": {
                  "type": 143
                }
              }
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "pallet_rewards",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "update_issuance_params",
                      "fields": [
                        {
                          "name": "proposer_subsidy_points",
                          "type": 142,
                          "typeName": "BoundedVec<RewardPoint<BlockNumberFor<T>, BalanceOf<T>>, T::\nMaxRewardPoints,>"
                        },
                        {
                          "name": "voter_subsidy_points",
                          "type": 142,
                          "typeName": "BoundedVec<RewardPoint<BlockNumberFor<T>, BalanceOf<T>>, T::\nMaxRewardPoints,>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::update_issuance_params`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 147
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 149,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 91,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 148,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 149,
            "type": {
              "def": {
                "sequence": {
                  "type": 147
                }
              }
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 151
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 152,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 151,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 91
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 91,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 152,
            "type": {
              "def": {
                "sequence": {
                  "type": 151
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 154
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 160,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 155
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 155,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "subspace_runtime",
                "HoldIdentifier"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Domains",
                      "fields": [
                        {
                          "type": 156,
                          "typeName": "DomainsHoldIdentifier"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Messenger",
                      "fields": [
                        {
                          "type": 158,
                          "typeName": "MessengerHoldIdentifier"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "sp_domains",
                "DomainsHoldIdentifier"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 157,
                          "typeName": "StakingHoldIdentifier"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DomainInstantiation",
                      "fields": [
                        {
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "StorageFund",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "sp_domains",
                "StakingHoldIdentifier"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Staked",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "path": [
                "sp_domains",
                "MessengerHoldIdentifier"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Channel",
                      "fields": [
                        {
                          "type": 159,
                          "typeName": "(ChainId, ChannelId)"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "def": {
                "tuple": [
                  60,
                  61
                ]
              }
            }
          },
          {
            "id": 160,
            "type": {
              "def": {
                "sequence": {
                  "type": 154
                }
              }
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 162
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 163,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "pallet_balances",
                "types",
                "IdAmount"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 49
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 49,
                      "typeName": "Id"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "def": {
                "sequence": {
                  "type": 162
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer_allow_death",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 58,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::transfer_allow_death`]."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 58,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::force_transfer`]."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 58,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::transfer_keep_alive`]."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::transfer_all`]."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "See [`Pallet::force_unreserve`]."
                      ]
                    },
                    {
                      "name": "upgrade_accounts",
                      "fields": [
                        {
                          "name": "who",
                          "type": 168,
                          "typeName": "Vec<T::AccountId>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "See [`Pallet::upgrade_accounts`]."
                      ]
                    },
                    {
                      "name": "force_set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 58,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "See [`Pallet::force_set_balance`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 49
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 166,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 167,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "def": {
                "compact": {
                  "type": 49
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "def": {
                "sequence": {
                  "type": 0
                }
              }
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value."
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal."
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit."
                      ]
                    },
                    {
                      "name": "Expendability",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account."
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account."
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist."
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed `MaxReserves`."
                      ]
                    },
                    {
                      "name": "TooManyHolds",
                      "index": 8,
                      "docs": [
                        "Number of holds exceed `MaxHolds`."
                      ]
                    },
                    {
                      "name": "TooManyFreezes",
                      "index": 9,
                      "docs": [
                        "Number of freezes exceed `MaxFreezes`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "pallet_transaction_fees",
                "BlockTransactionByteFee"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "next",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "pallet_transaction_fees",
                "CollectedFees"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "storage",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "compute",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "tips",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 173,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 175,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::batch`]."
                      ]
                    },
                    {
                      "name": "as_derivative",
                      "fields": [
                        {
                          "name": "index",
                          "type": 92,
                          "typeName": "u16"
                        },
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::as_derivative`]."
                      ]
                    },
                    {
                      "name": "batch_all",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 175,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::batch_all`]."
                      ]
                    },
                    {
                      "name": "dispatch_as",
                      "fields": [
                        {
                          "name": "as_origin",
                          "type": 248,
                          "typeName": "Box<T::PalletsOrigin>"
                        },
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::dispatch_as`]."
                      ]
                    },
                    {
                      "name": "force_batch",
                      "fields": [
                        {
                          "name": "calls",
                          "type": 175,
                          "typeName": "Vec<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::force_batch`]."
                      ]
                    },
                    {
                      "name": "with_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "See [`Pallet::with_weight`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 175,
            "type": {
              "def": {
                "sequence": {
                  "type": 176
                }
              }
            }
          },
          {
            "id": 176,
            "type": {
              "path": [
                "subspace_runtime",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 76,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 94,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Subspace",
                      "fields": [
                        {
                          "type": 121,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Subspace, Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Rewards",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Rewards, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 164,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 174,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Utility, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Domains",
                      "fields": [
                        {
                          "type": 177,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Domains, Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "RuntimeConfigs",
                      "fields": [
                        {
                          "type": 227,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RuntimeConfigs, Runtime>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 228,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Vesting, Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Messenger",
                      "fields": [
                        {
                          "type": 230,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Messenger, Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Transporter",
                      "fields": [
                        {
                          "type": 245,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Transporter, Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 247,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 100
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 177,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "submit_bundle",
                      "fields": [
                        {
                          "name": "opaque_bundle",
                          "type": 178,
                          "typeName": "OpaqueBundleOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::submit_bundle`]."
                      ]
                    },
                    {
                      "name": "submit_fraud_proof",
                      "fields": [
                        {
                          "name": "fraud_proof",
                          "type": 196,
                          "typeName": "Box<FraudProof<BlockNumberFor<T>, T::Hash, T::DomainHeader>>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::submit_fraud_proof`]."
                      ]
                    },
                    {
                      "name": "register_domain_runtime",
                      "fields": [
                        {
                          "name": "runtime_name",
                          "type": 74,
                          "typeName": "String"
                        },
                        {
                          "name": "runtime_type",
                          "type": 52,
                          "typeName": "RuntimeType"
                        },
                        {
                          "name": "raw_genesis_storage",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::register_domain_runtime`]."
                      ]
                    },
                    {
                      "name": "upgrade_domain_runtime",
                      "fields": [
                        {
                          "name": "runtime_id",
                          "type": 4,
                          "typeName": "RuntimeId"
                        },
                        {
                          "name": "raw_genesis_storage",
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::upgrade_domain_runtime`]."
                      ]
                    },
                    {
                      "name": "register_operator",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "config",
                          "type": 218,
                          "typeName": "OperatorConfig<BalanceOf<T>>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::register_operator`]."
                      ]
                    },
                    {
                      "name": "nominate_operator",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "See [`Pallet::nominate_operator`]."
                      ]
                    },
                    {
                      "name": "instantiate_domain",
                      "fields": [
                        {
                          "name": "domain_config",
                          "type": 221,
                          "typeName": "DomainConfig<T::AccountId, BalanceOf<T>>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "See [`Pallet::instantiate_domain`]."
                      ]
                    },
                    {
                      "name": "deregister_operator",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "See [`Pallet::deregister_operator`]."
                      ]
                    },
                    {
                      "name": "withdraw_stake",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        },
                        {
                          "name": "shares",
                          "type": 6,
                          "typeName": "T::Share"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "See [`Pallet::withdraw_stake`]."
                      ]
                    },
                    {
                      "name": "unlock_funds",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "See [`Pallet::unlock_funds`]."
                      ]
                    },
                    {
                      "name": "unlock_operator",
                      "fields": [
                        {
                          "name": "operator_id",
                          "type": 11,
                          "typeName": "OperatorId"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "See [`Pallet::unlock_operator`]."
                      ]
                    },
                    {
                      "name": "update_domain_operator_allow_list",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "operator_allow_list",
                          "type": 222,
                          "typeName": "OperatorAllowList<T::AccountId>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "See [`Pallet::update_domain_operator_allow_list`]."
                      ]
                    },
                    {
                      "name": "force_staking_epoch_transition",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "See [`Pallet::force_staking_epoch_transition`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 178,
            "type": {
              "path": [
                "sp_domains",
                "Bundle"
              ],
              "params": [
                {
                  "name": "Extrinsic",
                  "type": 179
                },
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainHeader",
                  "type": 123
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "sealed_header",
                      "type": 180,
                      "typeName": "SealedBundleHeader<Number, Hash, DomainHeader, Balance>"
                    },
                    {
                      "name": "extrinsics",
                      "type": 195,
                      "typeName": "Vec<Extrinsic>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 179,
            "type": {
              "path": [
                "sp_runtime",
                "OpaqueExtrinsic"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 180,
            "type": {
              "path": [
                "sp_domains",
                "SealedBundleHeader"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainHeader",
                  "type": 123
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 181,
                      "typeName": "BundleHeader<Number, Hash, DomainHeader, Balance>"
                    },
                    {
                      "name": "signature",
                      "type": 194,
                      "typeName": "OperatorSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "sp_domains",
                "BundleHeader"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainHeader",
                  "type": 123
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "proof_of_election",
                      "type": 182,
                      "typeName": "ProofOfElection<Hash>"
                    },
                    {
                      "name": "receipt",
                      "type": 184,
                      "typeName": "ExecutionReceipt<Number, Hash, HeaderNumberFor<DomainHeader>,\nHeaderHashFor<DomainHeader>, Balance,>"
                    },
                    {
                      "name": "estimated_bundle_weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "bundle_extrinsics_root",
                      "type": 12,
                      "typeName": "HeaderHashFor<DomainHeader>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "sp_domains",
                "ProofOfElection"
              ],
              "params": [
                {
                  "name": "CHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "slot_number",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_of_time",
                      "type": 135,
                      "typeName": "PotOutput"
                    },
                    {
                      "name": "vrf_signature",
                      "type": 183,
                      "typeName": "VrfSignature"
                    },
                    {
                      "name": "operator_id",
                      "type": 11,
                      "typeName": "OperatorId"
                    },
                    {
                      "name": "consensus_block_hash",
                      "type": 12,
                      "typeName": "CHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "vrf",
                "VrfSignature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "pre_output",
                      "type": 1,
                      "typeName": "VrfPreOutput"
                    },
                    {
                      "name": "proof",
                      "type": 112,
                      "typeName": "VrfProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "sp_domains",
                "ExecutionReceipt"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainNumber",
                  "type": 4
                },
                {
                  "name": "DomainHash",
                  "type": 12
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_block_number",
                      "type": 4,
                      "typeName": "DomainNumber"
                    },
                    {
                      "name": "domain_block_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "domain_block_extrinsic_root",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "parent_domain_block_receipt_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "consensus_block_number",
                      "type": 4,
                      "typeName": "Number"
                    },
                    {
                      "name": "consensus_block_hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "inboxed_bundles",
                      "type": 185,
                      "typeName": "Vec<InboxedBundle<DomainHash>>"
                    },
                    {
                      "name": "final_state_root",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "execution_trace",
                      "type": 69,
                      "typeName": "Vec<DomainHash>"
                    },
                    {
                      "name": "execution_trace_root",
                      "type": 12,
                      "typeName": "H256"
                    },
                    {
                      "name": "block_fees",
                      "type": 189,
                      "typeName": "BlockFees<Balance>"
                    },
                    {
                      "name": "transfers",
                      "type": 190,
                      "typeName": "Transfers<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "sequence": {
                  "type": 186
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "sp_domains",
                "InboxedBundle"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bundle",
                      "type": 187,
                      "typeName": "BundleValidity<Hash>"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 12,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "sp_domains",
                "BundleValidity"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 188,
                          "typeName": "InvalidBundleType"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Valid",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Hash"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "sp_domains",
                "InvalidBundleType"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UndecodableTx",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "OutOfRangeTx",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "IllegalTx",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "InvalidXDM",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InherentExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "sp_domains",
                "BlockFees"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "consensus_storage_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "domain_execution_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "burned_balance",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "sp_domains",
                "Transfers"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "transfers_in",
                      "type": 191,
                      "typeName": "BTreeMap<ChainId, Balance>"
                    },
                    {
                      "name": "transfers_out",
                      "type": 191,
                      "typeName": "BTreeMap<ChainId, Balance>"
                    },
                    {
                      "name": "rejected_transfers_claimed",
                      "type": 191,
                      "typeName": "BTreeMap<ChainId, Balance>"
                    },
                    {
                      "name": "transfers_rejected",
                      "type": 191,
                      "typeName": "BTreeMap<ChainId, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 60
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 192
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "def": {
                "sequence": {
                  "type": 193
                }
              }
            }
          },
          {
            "id": 193,
            "type": {
              "def": {
                "tuple": [
                  60,
                  6
                ]
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "sp_domains",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 111,
                      "typeName": "sr25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "def": {
                "sequence": {
                  "type": 179
                }
              }
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "FraudProof"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainHeader",
                  "type": 123
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidStateTransition",
                      "fields": [
                        {
                          "type": 197,
                          "typeName": "InvalidStateTransitionProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "InvalidTransaction",
                      "fields": [
                        {
                          "type": 203,
                          "typeName": "InvalidTransactionProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "BundleEquivocation",
                      "fields": [
                        {
                          "type": 204,
                          "typeName": "BundleEquivocationProof<Number, Hash, DomainHeader>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ImproperTransactionSortition",
                      "fields": [
                        {
                          "type": 205,
                          "typeName": "ImproperTransactionSortitionProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "InvalidBlockFees",
                      "fields": [
                        {
                          "type": 206,
                          "typeName": "InvalidBlockFeesProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "InvalidExtrinsicsRoot",
                      "fields": [
                        {
                          "type": 207,
                          "typeName": "InvalidExtrinsicsRootProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ValidBundle",
                      "fields": [
                        {
                          "type": 214,
                          "typeName": "ValidBundleProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "InvalidDomainBlockHash",
                      "fields": [
                        {
                          "type": 215,
                          "typeName": "InvalidDomainBlockHashProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "InvalidBundles",
                      "fields": [
                        {
                          "type": 216,
                          "typeName": "InvalidBundlesFraudProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "InvalidTransfers",
                      "fields": [
                        {
                          "type": 217,
                          "typeName": "InvalidTransfersProof<HeaderHashFor<DomainHeader>>"
                        }
                      ],
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidStateTransitionProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "proof",
                      "type": 198,
                      "typeName": "StorageProof"
                    },
                    {
                      "name": "execution_phase",
                      "type": 200,
                      "typeName": "ExecutionPhase"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "sp_trie",
                "storage_proof",
                "StorageProof"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "trie_nodes",
                      "type": 199,
                      "typeName": "BTreeSet<Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 79
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "ExecutionPhase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InitializeBlock",
                      "index": 0
                    },
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "name": "extrinsic_proof",
                          "type": 198,
                          "typeName": "StorageProof"
                        },
                        {
                          "name": "mismatch",
                          "type": 201,
                          "typeName": "ApplyExtrinsicMismatch"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "FinalizeBlock",
                      "fields": [
                        {
                          "name": "mismatch",
                          "type": 202,
                          "typeName": "FinalizeBlockMismatch"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "ApplyExtrinsicMismatch"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StateRoot",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Shorter",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "FinalizeBlockMismatch"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StateRoot",
                      "index": 0
                    },
                    {
                      "name": "Longer",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidTransactionProof"
              ],
              "params": [
                {
                  "name": "DomainHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "domain_block_number",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "domain_block_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "invalid_extrinsic",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "storage_proof",
                      "type": 198,
                      "typeName": "StorageProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "BundleEquivocationProof"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainHeader",
                  "type": 123
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "slot",
                      "type": 55,
                      "typeName": "Slot"
                    },
                    {
                      "name": "first_header",
                      "type": 180,
                      "typeName": "SealedBundleHeader<Number, Hash, DomainHeader, Balance>"
                    },
                    {
                      "name": "second_header",
                      "type": 180,
                      "typeName": "SealedBundleHeader<Number, Hash, DomainHeader, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "ImproperTransactionSortitionProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidBlockFeesProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "storage_proof",
                      "type": 198,
                      "typeName": "StorageProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidExtrinsicsRootProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "valid_bundle_digests",
                      "type": 208,
                      "typeName": "Vec<ValidBundleDigest>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "def": {
                "sequence": {
                  "type": 209
                }
              }
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "ValidBundleDigest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bundle_index",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "bundle_digest",
                      "type": 210,
                      "typeName": "Vec<\n(Option<domain_runtime_primitives::opaque::AccountId>,\nExtrinsicDigest,)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "def": {
                "sequence": {
                  "type": 211
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "def": {
                "tuple": [
                  212,
                  213
                ]
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "path": [
                "sp_domains",
                "ExtrinsicDigest"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Data",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Hash",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "H256"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "ValidBundleProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "bundle_index",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidDomainBlockHashProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "digest_storage_proof",
                      "type": 198,
                      "typeName": "StorageProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidBundlesFraudProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bundle_index",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "invalid_bundle_type",
                      "type": 188,
                      "typeName": "InvalidBundleType"
                    },
                    {
                      "name": "proof_data",
                      "type": 198,
                      "typeName": "StorageProof"
                    },
                    {
                      "name": "is_true_invalid_fraud_proof",
                      "type": 30,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "sp_domains_fraud_proof",
                "fraud_proof",
                "InvalidTransfersProof"
              ],
              "params": [
                {
                  "name": "ReceiptHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "bad_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "storage_proof",
                      "type": 198,
                      "typeName": "StorageProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "OperatorConfig"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "signing_key",
                      "type": 219,
                      "typeName": "OperatorPublicKey"
                    },
                    {
                      "name": "minimum_nominator_stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nomination_tax",
                      "type": 220,
                      "typeName": "Percent"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "sp_domains",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 39,
                      "typeName": "sr25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Percent"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "pallet_domains",
                "domain_registry",
                "DomainConfig"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_name",
                      "type": 74,
                      "typeName": "String"
                    },
                    {
                      "name": "runtime_id",
                      "type": 4,
                      "typeName": "RuntimeId"
                    },
                    {
                      "name": "max_block_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_block_weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "bundle_slot_probability",
                      "type": 137,
                      "typeName": "(u64, u64)"
                    },
                    {
                      "name": "target_bundles_per_block",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "operator_allow_list",
                      "type": 222,
                      "typeName": "OperatorAllowList<AccountId>"
                    },
                    {
                      "name": "initial_balances",
                      "type": 224,
                      "typeName": "Vec<(MultiAccountId, Balance)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "sp_domains",
                "OperatorAllowList"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Anyone",
                      "index": 0
                    },
                    {
                      "name": "Operators",
                      "fields": [
                        {
                          "type": 223,
                          "typeName": "BTreeSet<AccountId>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 168
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 224,
            "type": {
              "def": {
                "sequence": {
                  "type": 225
                }
              }
            }
          },
          {
            "id": 225,
            "type": {
              "def": {
                "tuple": [
                  226,
                  6
                ]
              }
            }
          },
          {
            "id": 226,
            "type": {
              "path": [
                "domain_runtime_primitives",
                "MultiAccountId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AccountId32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "AccountId20",
                      "fields": [
                        {
                          "type": 167,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 13,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 227,
            "type": {
              "path": [
                "pallet_runtime_configs",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_enable_domains",
                      "fields": [
                        {
                          "name": "enable_domains",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::set_enable_domains`]."
                      ]
                    },
                    {
                      "name": "set_enable_dynamic_cost_of_storage",
                      "fields": [
                        {
                          "name": "enable_dynamic_cost_of_storage",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::set_enable_dynamic_cost_of_storage`]."
                      ]
                    },
                    {
                      "name": "set_enable_balance_transfers",
                      "fields": [
                        {
                          "name": "enable_balance_transfers",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::set_enable_balance_transfers`]."
                      ]
                    },
                    {
                      "name": "set_enable_non_root_calls",
                      "fields": [
                        {
                          "name": "enable_non_root_calls",
                          "type": 30,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::set_enable_non_root_calls`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 228,
            "type": {
              "path": [
                "orml_vesting",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "claim",
                      "index": 0,
                      "docs": [
                        "See [`Pallet::claim`]."
                      ]
                    },
                    {
                      "name": "vested_transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "schedule",
                          "type": 57,
                          "typeName": "VestingScheduleOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::vested_transfer`]."
                      ]
                    },
                    {
                      "name": "update_vesting_schedules",
                      "fields": [
                        {
                          "name": "who",
                          "type": 165,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "vesting_schedules",
                          "type": 229,
                          "typeName": "Vec<VestingScheduleOf<T>>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::update_vesting_schedules`]."
                      ]
                    },
                    {
                      "name": "claim_for",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 165,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::claim_for`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 229,
            "type": {
              "def": {
                "sequence": {
                  "type": 57
                }
              }
            }
          },
          {
            "id": 230,
            "type": {
              "path": [
                "pallet_messenger",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "initiate_channel",
                      "fields": [
                        {
                          "name": "dst_chain_id",
                          "type": 60,
                          "typeName": "ChainId"
                        },
                        {
                          "name": "params",
                          "type": 231,
                          "typeName": "InitiateChannelParams<BalanceOf<T>>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::initiate_channel`]."
                      ]
                    },
                    {
                      "name": "close_channel",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 60,
                          "typeName": "ChainId"
                        },
                        {
                          "name": "channel_id",
                          "type": 61,
                          "typeName": "ChannelId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::close_channel`]."
                      ]
                    },
                    {
                      "name": "relay_message",
                      "fields": [
                        {
                          "name": "msg",
                          "type": 233,
                          "typeName": "CrossDomainMessage<T::Hash, T::MmrHash>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::relay_message`]."
                      ]
                    },
                    {
                      "name": "relay_message_response",
                      "fields": [
                        {
                          "name": "msg",
                          "type": 233,
                          "typeName": "CrossDomainMessage<T::Hash, T::MmrHash>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::relay_message_response`]."
                      ]
                    },
                    {
                      "name": "update_consensus_chain_allowlist",
                      "fields": [
                        {
                          "name": "update",
                          "type": 241,
                          "typeName": "ChainAllowlistUpdate"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "See [`Pallet::update_consensus_chain_allowlist`]."
                      ]
                    },
                    {
                      "name": "initiate_domain_update_chain_allowlist",
                      "fields": [
                        {
                          "name": "domain_id",
                          "type": 51,
                          "typeName": "DomainId"
                        },
                        {
                          "name": "update",
                          "type": 241,
                          "typeName": "ChainAllowlistUpdate"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "See [`Pallet::initiate_domain_update_chain_allowlist`]."
                      ]
                    },
                    {
                      "name": "update_domain_allowlist",
                      "fields": [
                        {
                          "name": "updates",
                          "type": 242,
                          "typeName": "DomainAllowlistUpdates"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "See [`Pallet::update_domain_allowlist`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 231,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "InitiateChannelParams"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_outgoing_messages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "fee_model",
                      "type": 232,
                      "typeName": "FeeModel<Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 232,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "FeeModel"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "relay_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 233,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "CrossDomainMessage"
              ],
              "params": [
                {
                  "name": "CBlockHash",
                  "type": 12
                },
                {
                  "name": "MmrHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "src_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "dst_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "channel_id",
                      "type": 61,
                      "typeName": "ChannelId"
                    },
                    {
                      "name": "nonce",
                      "type": 61,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "proof",
                      "type": 234,
                      "typeName": "Proof<CBlockHash, MmrHash>"
                    },
                    {
                      "name": "weight_tag",
                      "type": 239,
                      "typeName": "MessageWeightTag"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 234,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "Proof"
              ],
              "params": [
                {
                  "name": "CBlockHash",
                  "type": 12
                },
                {
                  "name": "MmrHash",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "name": "consensus_chain_mmr_proof",
                          "type": 235,
                          "typeName": "ConsensusChainMmrLeafProof<CBlockHash, MmrHash>"
                        },
                        {
                          "name": "message_proof",
                          "type": 198,
                          "typeName": "StorageProof"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Domain",
                      "fields": [
                        {
                          "name": "consensus_chain_mmr_proof",
                          "type": 235,
                          "typeName": "ConsensusChainMmrLeafProof<CBlockHash, MmrHash>"
                        },
                        {
                          "name": "domain_proof",
                          "type": 198,
                          "typeName": "StorageProof"
                        },
                        {
                          "name": "message_proof",
                          "type": 198,
                          "typeName": "StorageProof"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 235,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "ConsensusChainMmrLeafProof"
              ],
              "params": [
                {
                  "name": "BlockHash",
                  "type": 12
                },
                {
                  "name": "MmrHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "consensus_block_hash",
                      "type": 12,
                      "typeName": "BlockHash"
                    },
                    {
                      "name": "opaque_mmr_leaf",
                      "type": 236,
                      "typeName": "EncodableOpaqueLeaf"
                    },
                    {
                      "name": "proof",
                      "type": 237,
                      "typeName": "MmrProof<MmrHash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 236,
            "type": {
              "path": [
                "sp_mmr_primitives",
                "EncodableOpaqueLeaf"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 237,
            "type": {
              "path": [
                "sp_mmr_primitives",
                "Proof"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "leaf_indices",
                      "type": 238,
                      "typeName": "Vec<LeafIndex>"
                    },
                    {
                      "name": "leaf_count",
                      "type": 11,
                      "typeName": "NodeIndex"
                    },
                    {
                      "name": "items",
                      "type": 69,
                      "typeName": "Vec<Hash>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 238,
            "type": {
              "def": {
                "sequence": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 239,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "MessageWeightTag"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ProtocolChannelOpen",
                      "index": 0
                    },
                    {
                      "name": "ProtocolChannelClose",
                      "index": 1
                    },
                    {
                      "name": "EndpointRequest",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "Endpoint"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "EndpointResponse",
                      "fields": [
                        {
                          "type": 240,
                          "typeName": "Endpoint"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "None",
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 240,
            "type": {
              "path": [
                "sp_messenger",
                "endpoint",
                "Endpoint"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 11,
                          "typeName": "EndpointId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 241,
            "type": {
              "path": [
                "pallet_messenger",
                "ChainAllowlistUpdate"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Add",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "ChainId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Remove",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "ChainId"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 242,
            "type": {
              "path": [
                "sp_domains",
                "DomainAllowlistUpdates"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "allow_chains",
                      "type": 243,
                      "typeName": "BTreeSet<ChainId>"
                    },
                    {
                      "name": "remove_chains",
                      "type": 243,
                      "typeName": "BTreeSet<ChainId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 243,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 60
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 244
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 244,
            "type": {
              "def": {
                "sequence": {
                  "type": 60
                }
              }
            }
          },
          {
            "id": 245,
            "type": {
              "path": [
                "pallet_transporter",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dst_location",
                          "type": 246,
                          "typeName": "Location"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::transfer`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 246,
            "type": {
              "path": [
                "pallet_transporter",
                "Location"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "account_id",
                      "type": 226,
                      "typeName": "MultiAccountId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 247,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "See [`Pallet::sudo`]."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 9,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "See [`Pallet::sudo_unchecked_weight`]."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "See [`Pallet::set_key`]."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 165,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 176,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "See [`Pallet::sudo_as`]."
                      ]
                    },
                    {
                      "name": "remove_key",
                      "index": 4,
                      "docs": [
                        "See [`Pallet::remove_key`]."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains a variant per dispatchable extrinsic that this pallet has."
              ]
            }
          },
          {
            "id": 248,
            "type": {
              "path": [
                "subspace_runtime",
                "OriginCaller"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "system",
                      "fields": [
                        {
                          "type": 249,
                          "typeName": "frame_system::Origin<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Void",
                      "fields": [
                        {
                          "type": 250,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::\n__private::Void"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 249,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "RawOrigin"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Root",
                      "index": 0
                    },
                    {
                      "name": "Signed",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "None",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 250,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 251,
            "type": {
              "path": [
                "pallet_utility",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TooManyCalls",
                      "index": 0,
                      "docs": [
                        "Too many calls batched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 252,
            "type": {
              "path": [
                "pallet_domains",
                "runtime_registry",
                "RuntimeObject"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "runtime_name",
                      "type": 74,
                      "typeName": "String"
                    },
                    {
                      "name": "runtime_type",
                      "type": 52,
                      "typeName": "RuntimeType"
                    },
                    {
                      "name": "runtime_upgrades",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "raw_genesis",
                      "type": 253,
                      "typeName": "RawGenesis"
                    },
                    {
                      "name": "version",
                      "type": 87,
                      "typeName": "RuntimeVersion"
                    },
                    {
                      "name": "created_at",
                      "type": 4,
                      "typeName": "Number"
                    },
                    {
                      "name": "updated_at",
                      "type": 4,
                      "typeName": "Number"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 253,
            "type": {
              "path": [
                "sp_domains",
                "storage",
                "RawGenesis"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "top",
                      "type": 254,
                      "typeName": "GenesisStorage"
                    },
                    {
                      "name": "children_default",
                      "type": 259,
                      "typeName": "BTreeMap<StorageKey, GenesisStorage>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 254,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 255
                },
                {
                  "name": "V",
                  "type": 256
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 257
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 255,
            "type": {
              "path": [
                "sp_domains",
                "storage",
                "StorageKey"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 256,
            "type": {
              "path": [
                "sp_domains",
                "storage",
                "StorageData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 257,
            "type": {
              "def": {
                "sequence": {
                  "type": 258
                }
              }
            }
          },
          {
            "id": 258,
            "type": {
              "def": {
                "tuple": [
                  255,
                  256
                ]
              }
            }
          },
          {
            "id": 259,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 255
                },
                {
                  "name": "V",
                  "type": 254
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 260
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 260,
            "type": {
              "def": {
                "sequence": {
                  "type": 261
                }
              }
            }
          },
          {
            "id": 261,
            "type": {
              "def": {
                "tuple": [
                  255,
                  254
                ]
              }
            }
          },
          {
            "id": 262,
            "type": {
              "path": [
                "pallet_domains",
                "runtime_registry",
                "ScheduledRuntimeUpgrade"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "raw_genesis",
                      "type": 253,
                      "typeName": "RawGenesis"
                    },
                    {
                      "name": "version",
                      "type": 87,
                      "typeName": "RuntimeVersion"
                    },
                    {
                      "name": "hash",
                      "type": 12,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 263,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "StakingSummary"
              ],
              "params": [
                {
                  "name": "OperatorId",
                  "type": 11
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "current_epoch_index",
                      "type": 4,
                      "typeName": "EpochIndex"
                    },
                    {
                      "name": "current_total_stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "current_operators",
                      "type": 264,
                      "typeName": "BTreeMap<OperatorId, Balance>"
                    },
                    {
                      "name": "next_operators",
                      "type": 267,
                      "typeName": "BTreeSet<OperatorId>"
                    },
                    {
                      "name": "current_epoch_rewards",
                      "type": 264,
                      "typeName": "BTreeMap<OperatorId, Balance>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 264,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 11
                },
                {
                  "name": "V",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 265
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 265,
            "type": {
              "def": {
                "sequence": {
                  "type": 266
                }
              }
            }
          },
          {
            "id": 266,
            "type": {
              "def": {
                "tuple": [
                  11,
                  6
                ]
              }
            }
          },
          {
            "id": 267,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 238
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 268,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "Operator"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "signing_key",
                      "type": 219,
                      "typeName": "OperatorPublicKey"
                    },
                    {
                      "name": "current_domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "next_domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "minimum_nominator_stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "nomination_tax",
                      "type": 220,
                      "typeName": "Percent"
                    },
                    {
                      "name": "current_total_stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "current_epoch_rewards",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "current_total_shares",
                      "type": 6,
                      "typeName": "Share"
                    },
                    {
                      "name": "status",
                      "type": 269,
                      "typeName": "OperatorStatus<DomainBlockNumber>"
                    },
                    {
                      "name": "deposits_in_epoch",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "withdrawals_in_epoch",
                      "type": 6,
                      "typeName": "Share"
                    },
                    {
                      "name": "total_storage_fee_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 269,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "OperatorStatus"
              ],
              "params": [
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Registered",
                      "index": 0
                    },
                    {
                      "name": "Deregistered",
                      "fields": [
                        {
                          "type": 270,
                          "typeName": "OperatorDeregisteredInfo<DomainBlockNumber>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Slashed",
                      "index": 2
                    },
                    {
                      "name": "PendingSlash",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 270,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "OperatorDeregisteredInfo"
              ],
              "params": [
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_epoch",
                      "type": 271,
                      "typeName": "DomainEpoch"
                    },
                    {
                      "name": "unlock_at_confirmed_domain_block_number",
                      "type": 4,
                      "typeName": "DomainBlockNumber"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 271,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "DomainEpoch"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "type": 4,
                      "typeName": "EpochIndex"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 272,
            "type": {
              "def": {
                "tuple": [
                  11,
                  271
                ]
              }
            }
          },
          {
            "id": 273,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "SharePrice"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 274,
                      "typeName": "Perbill"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 274,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perbill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 275,
            "type": {
              "def": {
                "tuple": [
                  11,
                  0
                ]
              }
            }
          },
          {
            "id": 276,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "Deposit"
              ],
              "params": [
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "known",
                      "type": 277,
                      "typeName": "KnownDeposit<Share, Balance>"
                    },
                    {
                      "name": "pending",
                      "type": 278,
                      "typeName": "Option<PendingDeposit<Balance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 277,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "KnownDeposit"
              ],
              "params": [
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "shares",
                      "type": 6,
                      "typeName": "Share"
                    },
                    {
                      "name": "storage_fee_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 278,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 279
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 279
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 279,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "PendingDeposit"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "effective_domain_epoch",
                      "type": 271,
                      "typeName": "DomainEpoch"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "storage_fee_deposit",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 280,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "Withdrawal"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_withdrawal_amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "withdrawals",
                      "type": 281,
                      "typeName": "VecDeque<WithdrawalInBalance<DomainBlockNumber, Balance>>"
                    },
                    {
                      "name": "withdrawal_in_shares",
                      "type": 283,
                      "typeName": "Option<WithdrawalInShares<DomainBlockNumber, Share, Balance>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 281,
            "type": {
              "def": {
                "sequence": {
                  "type": 282
                }
              }
            }
          },
          {
            "id": 282,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "WithdrawalInBalance"
              ],
              "params": [
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_id",
                      "type": 51,
                      "typeName": "DomainId"
                    },
                    {
                      "name": "unlock_at_confirmed_domain_block_number",
                      "type": 4,
                      "typeName": "DomainBlockNumber"
                    },
                    {
                      "name": "amount_to_unlock",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "storage_fee_refund",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 283,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 284
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 284
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 284,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "WithdrawalInShares"
              ],
              "params": [
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                },
                {
                  "name": "Share",
                  "type": 6
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "domain_epoch",
                      "type": 271,
                      "typeName": "DomainEpoch"
                    },
                    {
                      "name": "unlock_at_confirmed_domain_block_number",
                      "type": 4,
                      "typeName": "DomainBlockNumber"
                    },
                    {
                      "name": "shares",
                      "type": 6,
                      "typeName": "Share"
                    },
                    {
                      "name": "storage_fee_refund",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 285,
            "type": {
              "path": [
                "pallet_domains",
                "domain_registry",
                "DomainObject"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "ReceiptHash",
                  "type": 12
                },
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "owner_account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "created_at",
                      "type": 4,
                      "typeName": "Number"
                    },
                    {
                      "name": "genesis_receipt_hash",
                      "type": 12,
                      "typeName": "ReceiptHash"
                    },
                    {
                      "name": "domain_config",
                      "type": 221,
                      "typeName": "DomainConfig<AccountId, Balance>"
                    },
                    {
                      "name": "domain_runtime_info",
                      "type": 286,
                      "typeName": "DomainRuntimeInfo"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 286,
            "type": {
              "path": [
                "pallet_domains",
                "runtime_registry",
                "DomainRuntimeInfo"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "EVM",
                      "fields": [
                        {
                          "name": "chain_id",
                          "type": 11,
                          "typeName": "EVMChainId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 287,
            "type": {
              "def": {
                "tuple": [
                  51,
                  4
                ]
              }
            }
          },
          {
            "id": 288,
            "type": {
              "path": [
                "pallet_domains",
                "block_tree",
                "BlockTreeNode"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "DomainNumber",
                  "type": 4
                },
                {
                  "name": "DomainHash",
                  "type": 12
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "execution_receipt",
                      "type": 184,
                      "typeName": "ExecutionReceipt<Number, Hash, DomainNumber, DomainHash, Balance>"
                    },
                    {
                      "name": "operator_ids",
                      "type": 238,
                      "typeName": "Vec<OperatorId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 289,
            "type": {
              "def": {
                "tuple": [
                  51,
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 290,
            "type": {
              "def": {
                "sequence": {
                  "type": 291
                }
              }
            }
          },
          {
            "id": 291,
            "type": {
              "path": [
                "sp_domains",
                "BundleDigest"
              ],
              "params": [
                {
                  "name": "Hash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header_hash",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 12,
                      "typeName": "Hash"
                    },
                    {
                      "name": "size",
                      "type": 4,
                      "typeName": "u32"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 292,
            "type": {
              "path": [
                "pallet_domains",
                "ElectionVerificationParams"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "operators",
                      "type": 264,
                      "typeName": "BTreeMap<OperatorId, Balance>"
                    },
                    {
                      "name": "total_domain_stake",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 293,
            "type": {
              "path": [
                "sp_domains",
                "ConfirmedDomainBlock"
              ],
              "params": [
                {
                  "name": "DomainBlockNumber",
                  "type": 4
                },
                {
                  "name": "DomainHash",
                  "type": 12
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "block_number",
                      "type": 4,
                      "typeName": "DomainBlockNumber"
                    },
                    {
                      "name": "block_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "parent_block_receipt_hash",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "state_root",
                      "type": 12,
                      "typeName": "DomainHash"
                    },
                    {
                      "name": "extrinsics_root",
                      "type": 12,
                      "typeName": "DomainHash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 294,
            "type": {
              "def": {
                "tuple": [
                  51,
                  11
                ]
              }
            }
          },
          {
            "id": 295,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "TxRangeState"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "tx_range",
                      "type": 296,
                      "typeName": "U256"
                    },
                    {
                      "name": "interval_blocks",
                      "type": 11,
                      "typeName": "u64"
                    },
                    {
                      "name": "interval_bundles",
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 296,
            "type": {
              "path": [
                "subspace_core_primitives",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 297,
                      "typeName": "private_u256::U256"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 297,
            "type": {
              "path": [
                "subspace_core_primitives",
                "private_u256",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 62,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 298,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 91,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 299,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FraudProof",
                      "fields": [
                        {
                          "type": 300,
                          "typeName": "FraudProofError"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Invalid fraud proof."
                      ]
                    },
                    {
                      "name": "RuntimeRegistry",
                      "fields": [
                        {
                          "type": 301,
                          "typeName": "RuntimeRegistryError"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Runtime registry specific errors"
                      ]
                    },
                    {
                      "name": "Staking",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "StakingError"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Staking related errors."
                      ]
                    },
                    {
                      "name": "StakingEpoch",
                      "fields": [
                        {
                          "type": 304,
                          "typeName": "StakingEpochError"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Staking epoch specific errors."
                      ]
                    },
                    {
                      "name": "DomainRegistry",
                      "fields": [
                        {
                          "type": 305,
                          "typeName": "DomainRegistryError"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Domain registry specific errors"
                      ]
                    },
                    {
                      "name": "BlockTree",
                      "fields": [
                        {
                          "type": 306,
                          "typeName": "BlockTreeError"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Block tree specific errors"
                      ]
                    },
                    {
                      "name": "BundleStorageFund",
                      "fields": [
                        {
                          "type": 303,
                          "typeName": "BundleStorageFundError"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Bundle storage fund specific errors"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 300,
            "type": {
              "path": [
                "pallet_domains",
                "pallet",
                "FraudProofError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BadReceiptNotFound",
                      "index": 0
                    },
                    {
                      "name": "ChallengingGenesisReceipt",
                      "index": 1
                    },
                    {
                      "name": "DescendantsOfFraudulentERNotPruned",
                      "index": 2
                    },
                    {
                      "name": "InvalidBlockFeesFraudProof",
                      "index": 3
                    },
                    {
                      "name": "InvalidTransfersFraudProof",
                      "index": 4
                    },
                    {
                      "name": "InvalidDomainBlockHashFraudProof",
                      "index": 5
                    },
                    {
                      "name": "InvalidExtrinsicRootFraudProof",
                      "index": 6
                    },
                    {
                      "name": "InvalidStateTransitionFraudProof",
                      "index": 7
                    },
                    {
                      "name": "ParentReceiptNotFound",
                      "index": 8
                    },
                    {
                      "name": "InvalidBundleFraudProof",
                      "index": 9
                    },
                    {
                      "name": "BadValidBundleFraudProof",
                      "index": 10
                    },
                    {
                      "name": "MissingOperator",
                      "index": 11
                    },
                    {
                      "name": "UnexpectedFraudProof",
                      "index": 12
                    },
                    {
                      "name": "BadBundleEquivocationFraudProof",
                      "index": 13
                    },
                    {
                      "name": "BadReceiptAlreadyReported",
                      "index": 14
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 301,
            "type": {
              "path": [
                "pallet_domains",
                "runtime_registry",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 0
                    },
                    {
                      "name": "InvalidSpecName",
                      "index": 1
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 2
                    },
                    {
                      "name": "MaxRuntimeId",
                      "index": 3
                    },
                    {
                      "name": "MissingRuntimeObject",
                      "index": 4
                    },
                    {
                      "name": "RuntimeUpgradeAlreadyScheduled",
                      "index": 5
                    },
                    {
                      "name": "MaxScheduledBlockNumber",
                      "index": 6
                    },
                    {
                      "name": "FailedToDecodeRawGenesis",
                      "index": 7
                    },
                    {
                      "name": "RuntimeCodeNotFoundInRawGenesis",
                      "index": 8
                    },
                    {
                      "name": "InvalidAccountIdType",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 302,
            "type": {
              "path": [
                "pallet_domains",
                "staking",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "MaximumOperatorId",
                      "index": 0
                    },
                    {
                      "name": "DomainNotInitialized",
                      "index": 1
                    },
                    {
                      "name": "PendingOperatorSwitch",
                      "index": 2
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 3
                    },
                    {
                      "name": "InsufficientShares",
                      "index": 4
                    },
                    {
                      "name": "ZeroWithdrawShares",
                      "index": 5
                    },
                    {
                      "name": "BalanceFreeze",
                      "index": 6
                    },
                    {
                      "name": "MinimumOperatorStake",
                      "index": 7
                    },
                    {
                      "name": "UnknownOperator",
                      "index": 8
                    },
                    {
                      "name": "MinimumNominatorStake",
                      "index": 9
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 10
                    },
                    {
                      "name": "BalanceUnderflow",
                      "index": 11
                    },
                    {
                      "name": "NotOperatorOwner",
                      "index": 12
                    },
                    {
                      "name": "OperatorNotRegistered",
                      "index": 13
                    },
                    {
                      "name": "UnknownNominator",
                      "index": 14
                    },
                    {
                      "name": "MissingOperatorOwner",
                      "index": 15
                    },
                    {
                      "name": "MintBalance",
                      "index": 16
                    },
                    {
                      "name": "BlockNumberOverflow",
                      "index": 17
                    },
                    {
                      "name": "RemoveLock",
                      "index": 18
                    },
                    {
                      "name": "EpochOverflow",
                      "index": 19
                    },
                    {
                      "name": "ShareUnderflow",
                      "index": 20
                    },
                    {
                      "name": "ShareOverflow",
                      "index": 21
                    },
                    {
                      "name": "TooManyPendingStakingOperation",
                      "index": 22
                    },
                    {
                      "name": "OperatorNotAllowed",
                      "index": 23
                    },
                    {
                      "name": "InvalidOperatorSigningKey",
                      "index": 24
                    },
                    {
                      "name": "MaximumNominators",
                      "index": 25
                    },
                    {
                      "name": "DuplicateOperatorSigningKey",
                      "index": 26
                    },
                    {
                      "name": "MissingOperatorEpochSharePrice",
                      "index": 27
                    },
                    {
                      "name": "MissingWithdrawal",
                      "index": 28
                    },
                    {
                      "name": "EpochNotComplete",
                      "index": 29
                    },
                    {
                      "name": "UnlockPeriodNotComplete",
                      "index": 30
                    },
                    {
                      "name": "OperatorNotDeregistered",
                      "index": 31
                    },
                    {
                      "name": "BundleStorageFund",
                      "fields": [
                        {
                          "type": 303,
                          "typeName": "bundle_storage_fund::Error"
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "UnconfirmedER",
                      "index": 33
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 303,
            "type": {
              "path": [
                "pallet_domains",
                "bundle_storage_fund",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BundleStorageFeePayment",
                      "index": 0
                    },
                    {
                      "name": "BalanceUnderflow",
                      "index": 1
                    },
                    {
                      "name": "MintBalance",
                      "index": 2
                    },
                    {
                      "name": "FailToDeposit",
                      "index": 3
                    },
                    {
                      "name": "WithdrawAndHold",
                      "index": 4
                    },
                    {
                      "name": "BalanceTransfer",
                      "index": 5
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 304,
            "type": {
              "path": [
                "pallet_domains",
                "staking_epoch",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "FinalizeSwitchOperatorDomain",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "TransitionError"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "FinalizeDomainEpochStaking",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "TransitionError"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "OperatorRewardStaking",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "TransitionError"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "SlashOperator",
                      "fields": [
                        {
                          "type": 302,
                          "typeName": "TransitionError"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 305,
            "type": {
              "path": [
                "pallet_domains",
                "domain_registry",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidBundlesPerBlock",
                      "index": 0
                    },
                    {
                      "name": "ExceedMaxDomainBlockWeight",
                      "index": 1
                    },
                    {
                      "name": "ExceedMaxDomainBlockSize",
                      "index": 2
                    },
                    {
                      "name": "MaxDomainId",
                      "index": 3
                    },
                    {
                      "name": "MaxEVMChainId",
                      "index": 4
                    },
                    {
                      "name": "InvalidSlotProbability",
                      "index": 5
                    },
                    {
                      "name": "RuntimeNotFound",
                      "index": 6
                    },
                    {
                      "name": "InsufficientFund",
                      "index": 7
                    },
                    {
                      "name": "DomainNameTooLong",
                      "index": 8
                    },
                    {
                      "name": "BalanceFreeze",
                      "index": 9
                    },
                    {
                      "name": "FailedToGenerateGenesisStateRoot",
                      "index": 10
                    },
                    {
                      "name": "DomainNotFound",
                      "index": 11
                    },
                    {
                      "name": "NotDomainOwner",
                      "index": 12
                    },
                    {
                      "name": "InitialBalanceOverflow",
                      "index": 13
                    },
                    {
                      "name": "TransfersTracker",
                      "index": 14
                    },
                    {
                      "name": "MinInitialAccountBalance",
                      "index": 15
                    },
                    {
                      "name": "MaxInitialDomainAccounts",
                      "index": 16
                    },
                    {
                      "name": "DuplicateInitialAccounts",
                      "index": 17
                    },
                    {
                      "name": "FailedToGenerateRawGenesis",
                      "fields": [
                        {
                          "type": 301,
                          "typeName": "crate::runtime_registry::Error"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "BundleLimitCalculationOverflow",
                      "index": 19
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 306,
            "type": {
              "path": [
                "pallet_domains",
                "block_tree",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidExtrinsicsRoots",
                      "index": 0
                    },
                    {
                      "name": "UnknownParentBlockReceipt",
                      "index": 1
                    },
                    {
                      "name": "BuiltOnUnknownConsensusBlock",
                      "index": 2
                    },
                    {
                      "name": "InFutureReceipt",
                      "index": 3
                    },
                    {
                      "name": "PrunedReceipt",
                      "index": 4
                    },
                    {
                      "name": "StaleReceipt",
                      "index": 5
                    },
                    {
                      "name": "NewBranchReceipt",
                      "index": 6
                    },
                    {
                      "name": "BadGenesisReceipt",
                      "index": 7
                    },
                    {
                      "name": "UnexpectedReceiptType",
                      "index": 8
                    },
                    {
                      "name": "MaxHeadDomainNumber",
                      "index": 9
                    },
                    {
                      "name": "MissingDomainBlock",
                      "index": 10
                    },
                    {
                      "name": "InvalidTraceRoot",
                      "index": 11
                    },
                    {
                      "name": "InvalidExecutionTrace",
                      "index": 12
                    },
                    {
                      "name": "UnavailableConsensusBlockHash",
                      "index": 13
                    },
                    {
                      "name": "InvalidStateRoot",
                      "index": 14
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 15
                    },
                    {
                      "name": "DomainTransfersTracking",
                      "index": 16
                    },
                    {
                      "name": "InvalidDomainTransfers",
                      "index": 17
                    },
                    {
                      "name": "OverwritingER",
                      "index": 18
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 307,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 57
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 229,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 308,
            "type": {
              "path": [
                "orml_vesting",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ZeroVestingPeriod",
                      "index": 0,
                      "docs": [
                        "Vesting period is zero"
                      ]
                    },
                    {
                      "name": "ZeroVestingPeriodCount",
                      "index": 1,
                      "docs": [
                        "Number of vests is zero"
                      ]
                    },
                    {
                      "name": "InsufficientBalanceToLock",
                      "index": 2,
                      "docs": [
                        "Insufficient amount of balance to lock"
                      ]
                    },
                    {
                      "name": "TooManyVestingSchedules",
                      "index": 3,
                      "docs": [
                        "This account have too many vesting schedules"
                      ]
                    },
                    {
                      "name": "AmountLow",
                      "index": 4,
                      "docs": [
                        "The vested transfer amount is too low"
                      ]
                    },
                    {
                      "name": "MaxVestingSchedulesExceeded",
                      "index": 5,
                      "docs": [
                        "Failed because the maximum vesting schedules was exceeded"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "The `Error` enum of this pallet."
              ]
            }
          },
          {
            "id": 309,
            "type": {
              "path": [
                "pallet_messenger",
                "Channel"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "AccountId",
                  "type": 0
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "channel_id",
                      "type": 61,
                      "typeName": "ChannelId"
                    },
                    {
                      "name": "state",
                      "type": 310,
                      "typeName": "ChannelState"
                    },
                    {
                      "name": "next_inbox_nonce",
                      "type": 61,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "next_outbox_nonce",
                      "type": 61,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "latest_response_received_message_nonce",
                      "type": 311,
                      "typeName": "Option<Nonce>"
                    },
                    {
                      "name": "max_outgoing_messages",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "fee",
                      "type": 232,
                      "typeName": "FeeModel<Balance>"
                    },
                    {
                      "name": "maybe_owner",
                      "type": 67,
                      "typeName": "Option<AccountId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 310,
            "type": {
              "path": [
                "pallet_messenger",
                "ChannelState"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Initiated",
                      "index": 0
                    },
                    {
                      "name": "Open",
                      "index": 1
                    },
                    {
                      "name": "Closed",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 311,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 61
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 61
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 312,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "Message"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "src_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "dst_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "channel_id",
                      "type": 61,
                      "typeName": "ChannelId"
                    },
                    {
                      "name": "nonce",
                      "type": 61,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "payload",
                      "type": 313,
                      "typeName": "VersionedPayload<Balance>"
                    },
                    {
                      "name": "last_delivered_message_response_nonce",
                      "type": 311,
                      "typeName": "Option<Nonce>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 313,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "VersionedPayload"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "type": 314,
                          "typeName": "Payload<Balance>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 314,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "Payload"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Protocol",
                      "fields": [
                        {
                          "type": 315,
                          "typeName": "RequestResponse<ProtocolMessageRequest<Balance>, ProtocolMessageResponse\n>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Endpoint",
                      "fields": [
                        {
                          "type": 317,
                          "typeName": "RequestResponse<EndpointRequest, EndpointResponse>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 315,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "RequestResponse"
              ],
              "params": [
                {
                  "name": "Request",
                  "type": 316
                },
                {
                  "name": "Response",
                  "type": 48
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Request",
                      "fields": [
                        {
                          "type": 316,
                          "typeName": "Request"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 48,
                          "typeName": "Response"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 316,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "ProtocolMessageRequest"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ChannelOpen",
                      "fields": [
                        {
                          "type": 231,
                          "typeName": "InitiateChannelParams<Balance>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ChannelClose",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 317,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "RequestResponse"
              ],
              "params": [
                {
                  "name": "Request",
                  "type": 318
                },
                {
                  "name": "Response",
                  "type": 319
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Request",
                      "fields": [
                        {
                          "type": 318,
                          "typeName": "Request"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Response",
                      "fields": [
                        {
                          "type": 319,
                          "typeName": "Response"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 318,
            "type": {
              "path": [
                "sp_messenger",
                "endpoint",
                "EndpointRequest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "src_endpoint",
                      "type": 240,
                      "typeName": "Endpoint"
                    },
                    {
                      "name": "dst_endpoint",
                      "type": 240,
                      "typeName": "Endpoint"
                    },
                    {
                      "name": "payload",
                      "type": 13,
                      "typeName": "EndpointPayload"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 319,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 13
                },
                {
                  "name": "E",
                  "type": 25
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 13
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 25
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 320,
            "type": {
              "def": {
                "tuple": [
                  60,
                  65
                ]
              }
            }
          },
          {
            "id": 321,
            "type": {
              "def": {
                "tuple": [
                  60,
                  61,
                  61
                ]
              }
            }
          },
          {
            "id": 322,
            "type": {
              "path": [
                "pallet_messenger",
                "messages",
                "BlockMessages"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "outbox",
                      "type": 323,
                      "typeName": "Vec<(ChainId, MessageId, MessageWeightTag)>"
                    },
                    {
                      "name": "inbox_responses",
                      "type": 323,
                      "typeName": "Vec<(ChainId, MessageId, MessageWeightTag)>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 323,
            "type": {
              "def": {
                "sequence": {
                  "type": 324
                }
              }
            }
          },
          {
            "id": 324,
            "type": {
              "def": {
                "tuple": [
                  60,
                  65,
                  239
                ]
              }
            }
          },
          {
            "id": 325,
            "type": {
              "path": [
                "pallet_messenger",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidChain",
                      "index": 0,
                      "docs": [
                        "Emits when the chain is neither consensus not chain."
                      ]
                    },
                    {
                      "name": "MissingChannel",
                      "index": 1,
                      "docs": [
                        "Emits when there is no channel for a given Channel ID."
                      ]
                    },
                    {
                      "name": "InvalidChannelState",
                      "index": 2,
                      "docs": [
                        "Emits when the said channel is not in an open state."
                      ]
                    },
                    {
                      "name": "NoOpenChannel",
                      "index": 3,
                      "docs": [
                        "Emits when there are no open channels for a chain"
                      ]
                    },
                    {
                      "name": "NoMessageHandler",
                      "index": 4,
                      "docs": [
                        "Emits when there are not message handler with given endpoint ID."
                      ]
                    },
                    {
                      "name": "OutboxFull",
                      "index": 5,
                      "docs": [
                        "Emits when the outbox is full for a channel."
                      ]
                    },
                    {
                      "name": "InvalidMessagePayload",
                      "index": 6,
                      "docs": [
                        "Emits when the message payload is invalid."
                      ]
                    },
                    {
                      "name": "InvalidMessageDestination",
                      "index": 7,
                      "docs": [
                        "Emits when the message destination is not valid."
                      ]
                    },
                    {
                      "name": "MessageVerification",
                      "fields": [
                        {
                          "type": 326,
                          "typeName": "VerificationError"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Emits when the message verification failed."
                      ]
                    },
                    {
                      "name": "MissingMessage",
                      "index": 9,
                      "docs": [
                        "Emits when there is no message available for the given nonce."
                      ]
                    },
                    {
                      "name": "WeightTagNotMatch",
                      "index": 10,
                      "docs": [
                        "Emits when there is mismatch between the message's weight tag and the message's",
                        "actual processing path"
                      ]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 11,
                      "docs": [
                        "Emits when the there is balance overflow."
                      ]
                    },
                    {
                      "name": "InvalidAllowedChain",
                      "index": 12,
                      "docs": [
                        "Invalid allowed chain."
                      ]
                    },
                    {
                      "name": "OperationNotAllowed",
                      "index": 13,
                      "docs": [
                        "Operation not allowed."
                      ]
                    },
                    {
                      "name": "NotDomainOwner",
                      "index": 14,
                      "docs": [
                        "Account is not a Domain owner."
                      ]
                    },
                    {
                      "name": "ChainNotAllowed",
                      "index": 15,
                      "docs": [
                        "Chain not allowed to open channel"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 16,
                      "docs": [
                        "Not enough balance to do the operation"
                      ]
                    },
                    {
                      "name": "BalanceHold",
                      "index": 17,
                      "docs": [
                        "Failed to hold balance"
                      ]
                    },
                    {
                      "name": "ChannelOwner",
                      "index": 18,
                      "docs": [
                        "Not a channel owner"
                      ]
                    },
                    {
                      "name": "BalanceUnlock",
                      "index": 19,
                      "docs": [
                        "Failed to unlock the balance"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "`pallet-messenger` errors"
              ]
            }
          },
          {
            "id": 326,
            "type": {
              "path": [
                "sp_domains",
                "proof_provider_and_verifier",
                "VerificationError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidProof",
                      "index": 0
                    },
                    {
                      "name": "MissingValue",
                      "index": 1
                    },
                    {
                      "name": "FailedToDecode",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 327,
            "type": {
              "path": [
                "pallet_transporter",
                "Transfer"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "sender",
                      "type": 246,
                      "typeName": "Location"
                    },
                    {
                      "name": "receiver",
                      "type": 246,
                      "typeName": "Location"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 328,
            "type": {
              "def": {
                "tuple": [
                  60,
                  60
                ]
              }
            }
          },
          {
            "id": 329,
            "type": {
              "path": [
                "pallet_transporter",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LowBalance",
                      "index": 0,
                      "docs": [
                        "Emits when the account has low balance to make a transfer."
                      ]
                    },
                    {
                      "name": "InvalidPayload",
                      "index": 1,
                      "docs": [
                        "Failed to decode transfer payload."
                      ]
                    },
                    {
                      "name": "MissingTransferRequest",
                      "index": 2,
                      "docs": [
                        "Emits when the request for a response received is missing."
                      ]
                    },
                    {
                      "name": "InvalidTransferRequest",
                      "index": 3,
                      "docs": [
                        "Emits when the request doesn't match the expected one.."
                      ]
                    },
                    {
                      "name": "UnexpectedMessage",
                      "index": 4,
                      "docs": [
                        "Emits when the incoming message is not bound to this chain."
                      ]
                    },
                    {
                      "name": "InvalidAccountId",
                      "index": 5,
                      "docs": [
                        "Emits when the account id type is invalid."
                      ]
                    },
                    {
                      "name": "LowBalanceOnDomain",
                      "index": 6,
                      "docs": [
                        "Emits when from_chain do not have enough funds to finalize the transfer."
                      ]
                    },
                    {
                      "name": "NonConsensusChain",
                      "index": 7,
                      "docs": [
                        "Emits when the transfer tracking was called from non-consensus chain"
                      ]
                    },
                    {
                      "name": "BalanceOverflow",
                      "index": 8,
                      "docs": [
                        "Emits when balance overflow"
                      ]
                    },
                    {
                      "name": "BalanceUnderflow",
                      "index": 9,
                      "docs": [
                        "Emits when balance underflow"
                      ]
                    },
                    {
                      "name": "DomainBalanceAlreadyInitialized",
                      "index": 10,
                      "docs": [
                        "Emits when domain balance is already initialized"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Errors emitted by pallet-transporter."
              ]
            }
          },
          {
            "id": 330,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet."
              ]
            }
          },
          {
            "id": 331,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 332,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 111,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 333,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 332,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 112,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 333,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 334,
                      "typeName": "[u8; SIGNATURE_SERIALIZED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 334,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 335,
            "type": {
              "def": {
                "tuple": [
                  336,
                  337,
                  338,
                  339,
                  340,
                  342,
                  343,
                  344,
                  345,
                  346
                ]
              }
            }
          },
          {
            "id": 336,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_non_zero_sender",
                "CheckNonZeroSender"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 337,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 338,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 339,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 340,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 341,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 341,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 342,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 73,
                      "typeName": "T::Nonce"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 343,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 344,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 58,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 345,
            "type": {
              "path": [
                "subspace_runtime",
                "signed_extensions",
                "CheckStorageAccess"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 346,
            "type": {
              "path": [
                "subspace_runtime",
                "signed_extensions",
                "DisablePallets"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 347,
            "type": {
              "path": [
                "subspace_runtime",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 348,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "block",
                "Block"
              ],
              "params": [
                {
                  "name": "Header",
                  "type": 123
                },
                {
                  "name": "Extrinsic",
                  "type": 349
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "header",
                      "type": 123,
                      "typeName": "Header"
                    },
                    {
                      "name": "extrinsics",
                      "type": 350,
                      "typeName": "Vec<Extrinsic>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 349,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 165
                },
                {
                  "name": "Call",
                  "type": 176
                },
                {
                  "name": "Signature",
                  "type": 331
                },
                {
                  "name": "Extra",
                  "type": 335
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 350,
            "type": {
              "def": {
                "sequence": {
                  "type": 349
                }
              }
            }
          },
          {
            "id": 351,
            "type": {
              "path": [
                "sp_core",
                "OpaqueMetadata"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 13,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 352,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 351
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 351
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 353,
            "type": {
              "def": {
                "sequence": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 354,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 48
                },
                {
                  "name": "E",
                  "type": 355
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 48
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 355
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 355,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionValidityError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Invalid",
                      "fields": [
                        {
                          "type": 356,
                          "typeName": "InvalidTransaction"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Unknown",
                      "fields": [
                        {
                          "type": 357,
                          "typeName": "UnknownTransaction"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 356,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "InvalidTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Call",
                      "index": 0
                    },
                    {
                      "name": "Payment",
                      "index": 1
                    },
                    {
                      "name": "Future",
                      "index": 2
                    },
                    {
                      "name": "Stale",
                      "index": 3
                    },
                    {
                      "name": "BadProof",
                      "index": 4
                    },
                    {
                      "name": "AncientBirthBlock",
                      "index": 5
                    },
                    {
                      "name": "ExhaustsResources",
                      "index": 6
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "BadMandatory",
                      "index": 8
                    },
                    {
                      "name": "MandatoryValidation",
                      "index": 9
                    },
                    {
                      "name": "BadSigner",
                      "index": 10
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 357,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "UnknownTransaction"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "CannotLookup",
                      "index": 0
                    },
                    {
                      "name": "NoUnsignedValidator",
                      "index": 1
                    },
                    {
                      "name": "Custom",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 358,
            "type": {
              "path": [
                "sp_inherents",
                "InherentData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "data",
                      "type": 359,
                      "typeName": "BTreeMap<InherentIdentifier, Vec<u8>>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 359,
            "type": {
              "path": [
                "BTreeMap"
              ],
              "params": [
                {
                  "name": "K",
                  "type": 91
                },
                {
                  "name": "V",
                  "type": 13
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 360
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 360,
            "type": {
              "def": {
                "sequence": {
                  "type": 361
                }
              }
            }
          },
          {
            "id": 361,
            "type": {
              "def": {
                "tuple": [
                  91,
                  13
                ]
              }
            }
          },
          {
            "id": 362,
            "type": {
              "path": [
                "sp_inherents",
                "CheckInherentsResult"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "okay",
                      "type": 30,
                      "typeName": "bool"
                    },
                    {
                      "name": "fatal_error",
                      "type": 30,
                      "typeName": "bool"
                    },
                    {
                      "name": "errors",
                      "type": 358,
                      "typeName": "InherentData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 363,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "TransactionSource"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InBlock",
                      "index": 0
                    },
                    {
                      "name": "Local",
                      "index": 1
                    },
                    {
                      "name": "External",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 364,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 365
                },
                {
                  "name": "E",
                  "type": 355
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 365
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 355
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 365,
            "type": {
              "path": [
                "sp_runtime",
                "transaction_validity",
                "ValidTransaction"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "priority",
                      "type": 11,
                      "typeName": "TransactionPriority"
                    },
                    {
                      "name": "requires",
                      "type": 79,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "provides",
                      "type": 79,
                      "typeName": "Vec<TransactionTag>"
                    },
                    {
                      "name": "longevity",
                      "type": 11,
                      "typeName": "TransactionLongevity"
                    },
                    {
                      "name": "propagate",
                      "type": 30,
                      "typeName": "bool"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 366,
            "type": {
              "path": [
                "subspace_core_primitives",
                "objects",
                "BlockObjectMapping"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "objects",
                      "type": 367,
                      "typeName": "Vec<BlockObject>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 367,
            "type": {
              "def": {
                "sequence": {
                  "type": 368
                }
              }
            }
          },
          {
            "id": 368,
            "type": {
              "path": [
                "subspace_core_primitives",
                "objects",
                "BlockObject"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "hash",
                          "type": 1,
                          "typeName": "Blake3Hash"
                        },
                        {
                          "name": "offset",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 369,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "PotParameters"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "slot_iterations",
                          "type": 99,
                          "typeName": "NonZeroU32"
                        },
                        {
                          "name": "next_change",
                          "type": 370,
                          "typeName": "Option<PotParametersChange>"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 370,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 371
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 371
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 371,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "PotParametersChange"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "slot",
                      "type": 55,
                      "typeName": "Slot"
                    },
                    {
                      "name": "slot_iterations",
                      "type": 99,
                      "typeName": "NonZeroU32"
                    },
                    {
                      "name": "entropy",
                      "type": 1,
                      "typeName": "Blake3Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 372,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 49
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 49
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 373,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "SignedVote"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "RewardAddress",
                  "type": 38
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vote",
                      "type": 374,
                      "typeName": "Vote<Number, Hash, RewardAddress>"
                    },
                    {
                      "name": "signature",
                      "type": 110,
                      "typeName": "FarmerSignature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 374,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "Vote"
              ],
              "params": [
                {
                  "name": "Number",
                  "type": 4
                },
                {
                  "name": "Hash",
                  "type": 12
                },
                {
                  "name": "RewardAddress",
                  "type": 38
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "height",
                          "type": 4,
                          "typeName": "Number"
                        },
                        {
                          "name": "parent_hash",
                          "type": 12,
                          "typeName": "Hash"
                        },
                        {
                          "name": "slot",
                          "type": 55,
                          "typeName": "Slot"
                        },
                        {
                          "name": "solution",
                          "type": 375,
                          "typeName": "Solution<FarmerPublicKey, RewardAddress>"
                        },
                        {
                          "name": "proof_of_time",
                          "type": 135,
                          "typeName": "PotOutput"
                        },
                        {
                          "name": "future_proof_of_time",
                          "type": 135,
                          "typeName": "PotOutput"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 375,
            "type": {
              "path": [
                "subspace_core_primitives",
                "Solution"
              ],
              "params": [
                {
                  "name": "PublicKey",
                  "type": 38
                },
                {
                  "name": "RewardAddress",
                  "type": 38
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "public_key",
                      "type": 38,
                      "typeName": "PublicKey"
                    },
                    {
                      "name": "reward_address",
                      "type": 38,
                      "typeName": "RewardAddress"
                    },
                    {
                      "name": "sector_index",
                      "type": 92,
                      "typeName": "SectorIndex"
                    },
                    {
                      "name": "history_size",
                      "type": 128,
                      "typeName": "HistorySize"
                    },
                    {
                      "name": "piece_offset",
                      "type": 105,
                      "typeName": "PieceOffset"
                    },
                    {
                      "name": "record_commitment",
                      "type": 130,
                      "typeName": "RecordCommitment"
                    },
                    {
                      "name": "record_witness",
                      "type": 131,
                      "typeName": "RecordWitness"
                    },
                    {
                      "name": "chunk",
                      "type": 106,
                      "typeName": "Scalar"
                    },
                    {
                      "name": "chunk_witness",
                      "type": 132,
                      "typeName": "ChunkWitness"
                    },
                    {
                      "name": "proof_of_space",
                      "type": 133,
                      "typeName": "PosProof"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 376,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 34
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 34
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 377,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 124
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 124
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 378,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 38
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 38
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 379,
            "type": {
              "path": [
                "sp_consensus_subspace",
                "ChainConstants"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "fields": [
                        {
                          "name": "confirmation_depth_k",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "block_authoring_delay",
                          "type": 55,
                          "typeName": "Slot"
                        },
                        {
                          "name": "era_duration",
                          "type": 4,
                          "typeName": "BlockNumber"
                        },
                        {
                          "name": "slot_probability",
                          "type": 137,
                          "typeName": "(u64, u64)"
                        },
                        {
                          "name": "slot_duration",
                          "type": 380,
                          "typeName": "SlotDuration"
                        },
                        {
                          "name": "recent_segments",
                          "type": 128,
                          "typeName": "HistorySize"
                        },
                        {
                          "name": "recent_history_fraction",
                          "type": 138,
                          "typeName": "(HistorySize, HistorySize)"
                        },
                        {
                          "name": "min_sector_lifetime",
                          "type": 128,
                          "typeName": "HistorySize"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 380,
            "type": {
              "path": [
                "sp_consensus_slots",
                "SlotDuration"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 11,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 381,
            "type": {
              "def": {
                "sequence": {
                  "type": 178
                }
              }
            }
          },
          {
            "id": 382,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 178
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 178
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 383,
            "type": {
              "def": {
                "sequence": {
                  "type": 184
                }
              }
            }
          },
          {
            "id": 384,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 385
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 385
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 385,
            "type": {
              "def": {
                "tuple": [
                  386,
                  4
                ]
              }
            }
          },
          {
            "id": 386,
            "type": {
              "path": [
                "sp_domains",
                "DomainInstanceData"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "runtime_type",
                      "type": 52,
                      "typeName": "RuntimeType"
                    },
                    {
                      "name": "raw_genesis",
                      "type": 253,
                      "typeName": "RawGenesis"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 387,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 12
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 388,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 389
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 389
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 389,
            "type": {
              "path": [
                "sp_domains",
                "DomainBlockLimit"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_block_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_block_weight",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 390,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 391
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 391
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 391,
            "type": {
              "path": [
                "sp_domains",
                "DomainBundleLimit"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max_bundle_size",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "max_bundle_weight",
                      "type": 9,
                      "typeName": "Weight"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 392,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 184
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 184
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 393,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 394
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 394
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 394,
            "type": {
              "def": {
                "tuple": [
                  264,
                  238
                ]
              }
            }
          },
          {
            "id": 395,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 396
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 396
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 396,
            "type": {
              "def": {
                "tuple": [
                  4,
                  12
                ]
              }
            }
          },
          {
            "id": 397,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 398
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 398
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 398,
            "type": {
              "path": [
                "sp_domains",
                "bundle_producer_election",
                "BundleProducerElectionParams"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "total_domain_stake",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "bundle_slot_probability",
                      "type": 137,
                      "typeName": "(u64, u64)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 399,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 400
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 400
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 400,
            "type": {
              "def": {
                "tuple": [
                  219,
                  6
                ]
              }
            }
          },
          {
            "id": 401,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 402
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 402
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 402,
            "type": {
              "def": {
                "sequence": {
                  "type": 403
                }
              }
            }
          },
          {
            "id": 403,
            "type": {
              "def": {
                "tuple": [
                  13,
                  404
                ]
              }
            }
          },
          {
            "id": 404,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "KeyTypeId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 17,
                      "typeName": "[u8; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 405,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "RuntimeDispatchInfo"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "Weight",
                  "type": 9
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 9,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 23,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "partial_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 406,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "FeeDetails"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "inclusion_fee",
                      "type": 407,
                      "typeName": "Option<InclusionFee<Balance>>"
                    },
                    {
                      "name": "tip",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 407,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 408
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 408
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 408,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "types",
                "InclusionFee"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "len_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "adjusted_weight_fee",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 409,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 30
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 30
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 410,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 242
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 242
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 411,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "BlockMessagesWithStorageKey"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "outbox",
                      "type": 412,
                      "typeName": "Vec<BlockMessageWithStorageKey>"
                    },
                    {
                      "name": "inbox_responses",
                      "type": 412,
                      "typeName": "Vec<BlockMessageWithStorageKey>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 412,
            "type": {
              "def": {
                "sequence": {
                  "type": 413
                }
              }
            }
          },
          {
            "id": 413,
            "type": {
              "path": [
                "sp_messenger",
                "messages",
                "BlockMessageWithStorageKey"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "src_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "dst_chain_id",
                      "type": 60,
                      "typeName": "ChainId"
                    },
                    {
                      "name": "channel_id",
                      "type": 61,
                      "typeName": "ChannelId"
                    },
                    {
                      "name": "nonce",
                      "type": 61,
                      "typeName": "Nonce"
                    },
                    {
                      "name": "storage_key",
                      "type": 13,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "weight_tag",
                      "type": 239,
                      "typeName": "MessageWeightTag"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 414,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 349
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 349
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 415,
            "type": {
              "def": {
                "sequence": {
                  "type": 196
                }
              }
            }
          },
          {
            "id": 416,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 12
                },
                {
                  "name": "E",
                  "type": 417
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 12
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 417
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 417,
            "type": {
              "path": [
                "sp_mmr_primitives",
                "Error"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidNumericOp",
                      "index": 0
                    },
                    {
                      "name": "Push",
                      "index": 1
                    },
                    {
                      "name": "GetRoot",
                      "index": 2
                    },
                    {
                      "name": "Commit",
                      "index": 3
                    },
                    {
                      "name": "GenerateProof",
                      "index": 4
                    },
                    {
                      "name": "Verify",
                      "index": 5
                    },
                    {
                      "name": "LeafNotFound",
                      "index": 6
                    },
                    {
                      "name": "PalletNotIncluded",
                      "index": 7
                    },
                    {
                      "name": "InvalidLeafIndex",
                      "index": 8
                    },
                    {
                      "name": "InvalidBestKnownBlock",
                      "index": 9
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 418,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 11
                },
                {
                  "name": "E",
                  "type": 417
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 11
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 417
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 419,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 420
                },
                {
                  "name": "E",
                  "type": 417
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 420
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 417
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 420,
            "type": {
              "def": {
                "tuple": [
                  421,
                  237
                ]
              }
            }
          },
          {
            "id": 421,
            "type": {
              "def": {
                "sequence": {
                  "type": 236
                }
              }
            }
          },
          {
            "id": 422,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 49
                },
                {
                  "name": "E",
                  "type": 417
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 49
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 417
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 423,
            "type": {
              "path": [
                "subspace_runtime",
                "RuntimeError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 93,
                          "typeName": "frame_system::Error<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Subspace",
                      "fields": [
                        {
                          "type": 139,
                          "typeName": "pallet_subspace::Error<Runtime>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 169,
                          "typeName": "pallet_balances::Error<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Utility",
                      "fields": [
                        {
                          "type": 251,
                          "typeName": "pallet_utility::Error<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Domains",
                      "fields": [
                        {
                          "type": 299,
                          "typeName": "pallet_domains::Error<Runtime>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Vesting",
                      "fields": [
                        {
                          "type": 308,
                          "typeName": "orml_vesting::Error<Runtime>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Messenger",
                      "fields": [
                        {
                          "type": 325,
                          "typeName": "pallet_messenger::Error<Runtime>"
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Transporter",
                      "fields": [
                        {
                          "type": 329,
                          "typeName": "pallet_transporter::Error<Runtime>"
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 330,
                          "typeName": "pallet_sudo::Error<Runtime>"
                        }
                      ],
                      "index": 100
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 8
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 14
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 18
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 12,
                    "value": 70
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 72
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 68
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              },
              {
                "name": "AuthorizedUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 75
                },
                "default": [
                  0
                ],
                "docs": [
                  " `Some` if a code upgrade has been authorized."
                ]
              }
            ]
          },
          "calls": {
            "ty": 76
          },
          "event": {
            "ty": 21
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 80,
              "value": [
                2,
                91,
                31,
                93,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                194,
                160,
                169,
                29,
                0,
                1,
                11,
                208,
                95,
                159,
                166,
                46,
                1,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                166,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191,
                1,
                0,
                0,
                194,
                160,
                169,
                29,
                0,
                1,
                11,
                208,
                231,
                241,
                16,
                163,
                1,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                230,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                194,
                160,
                169,
                29,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 84,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 86,
              "value": [
                0,
                18,
                122,
                0,
                0,
                0,
                0,
                0,
                128,
                240,
                250,
                2,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 87,
              "value": [
                32,
                115,
                117,
                98,
                115,
                112,
                97,
                99,
                101,
                32,
                115,
                117,
                98,
                115,
                112,
                97,
                99,
                101,
                0,
                0,
                0,
                0,
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                5,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                2,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                80,
                90,
                159,
                163,
                135,
                130,
                198,
                227,
                1,
                0,
                0,
                0,
                227,
                255,
                40,
                5,
                33,
                198,
                29,
                106,
                1,
                0,
                0,
                0,
                49,
                50,
                0,
                255,
                242,
                53,
                220,
                77,
                2,
                0,
                0,
                0,
                13,
                140,
                213,
                66,
                109,
                92,
                38,
                9,
                1,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                4,
                0,
                0,
                0,
                132,
                228,
                31,
                221,
                224,
                119,
                41,
                128,
                3,
                0,
                0,
                0,
                63,
                220,
                90,
                215,
                252,
                56,
                73,
                190,
                1,
                0,
                0,
                0,
                221,
                91,
                52,
                70,
                113,
                246,
                90,
                106,
                1,
                0,
                0,
                0,
                145,
                213,
                223,
                24,
                176,
                210,
                207,
                88,
                2,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 92,
              "value": [
                206,
                8
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 93
          },
          "index": 0,
          "docs": []
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the timestamp has been updated in this block.",
                  "",
                  " This value is updated to `true` upon successful submission of a timestamp by a node.",
                  " It is then checked at the end of each block execution in the `on_finalize` hook."
                ]
              }
            ]
          },
          "calls": {
            "ty": 94
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 11,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks.",
                "",
                " Be aware that this is different to the *expected* period that the block production",
                " apparatus provides. Your chosen consensus system will generally work with this to",
                " determine a sensible block time. For example, in the Aura pallet it will be double this",
                " period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1,
          "docs": []
        },
        {
          "name": "Subspace",
          "storage": {
            "prefix": "Subspace",
            "entries": [
              {
                "name": "GenesisSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 55
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The slot at which the first block was created. This is 0 until the first block of the chain."
                ]
              },
              {
                "name": "CurrentSlot",
                "modifier": "Default",
                "ty": {
                  "Plain": 55
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current slot number."
                ]
              },
              {
                "name": "BlockSlots",
                "modifier": "Default",
                "ty": {
                  "Plain": 95
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bounded mapping from block number to slot"
                ]
              },
              {
                "name": "PotSlotIterations",
                "modifier": "Optional",
                "ty": {
                  "Plain": 99
                },
                "default": [
                  0
                ],
                "docs": [
                  " Number of iterations for proof of time per slot"
                ]
              },
              {
                "name": "SolutionRanges",
                "modifier": "Default",
                "ty": {
                  "Plain": 100
                },
                "default": [
                  165,
                  226,
                  236,
                  195,
                  103,
                  216,
                  21,
                  0,
                  0,
                  165,
                  226,
                  236,
                  195,
                  103,
                  216,
                  21,
                  0,
                  0
                ],
                "docs": [
                  " Solution ranges used for challenges."
                ]
              },
              {
                "name": "ShouldAdjustSolutionRange",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage to check if the solution range is to be adjusted for next era"
                ]
              },
              {
                "name": "NextSolutionRangeOverride",
                "modifier": "Optional",
                "ty": {
                  "Plain": 102
                },
                "default": [
                  0
                ],
                "docs": [
                  " Override solution range during next update"
                ]
              },
              {
                "name": "EraStartSlot",
                "modifier": "Optional",
                "ty": {
                  "Plain": 55
                },
                "default": [
                  0
                ],
                "docs": [
                  " Slot at which current era started."
                ]
              },
              {
                "name": "BlockList",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 38,
                    "value": 49
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A set of blocked farmers keyed by their public key."
                ]
              },
              {
                "name": "SegmentCommitment",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 33,
                    "value": 34
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping from segment index to corresponding segment commitment of contained records."
                ]
              },
              {
                "name": "CounterForSegmentCommitment",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "DidProcessSegmentHeaders",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the segment headers inherent has been processed in this block (temporary value).",
                  "",
                  " This value is updated to `true` when processing `store_segment_headers` by a node.",
                  " It is then cleared at the end of each block execution in the `on_finalize` hook."
                ]
              },
              {
                "name": "ParentVoteVerificationData",
                "modifier": "Optional",
                "ty": {
                  "Plain": 103
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage of previous vote verification data, updated on each block during finalization."
                ]
              },
              {
                "name": "ParentBlockAuthorInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 104
                },
                "default": [
                  0
                ],
                "docs": [
                  " Parent block author information."
                ]
              },
              {
                "name": "EnableRewards",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Enable rewards since specified block number."
                ]
              },
              {
                "name": "EnableRewardsBelowSolutionRange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0
                ],
                "docs": [
                  " Enable rewards when solution range is below this threshold."
                ]
              },
              {
                "name": "CurrentBlockAuthorInfo",
                "modifier": "Optional",
                "ty": {
                  "Plain": 107
                },
                "default": [
                  0
                ],
                "docs": [
                  " Block author information"
                ]
              },
              {
                "name": "ParentBlockVoters",
                "modifier": "Default",
                "ty": {
                  "Plain": 108
                },
                "default": [
                  0
                ],
                "docs": [
                  " Voters in the parent block (set at the end of the block with current values)."
                ]
              },
              {
                "name": "CurrentBlockVoters",
                "modifier": "Optional",
                "ty": {
                  "Plain": 108
                },
                "default": [
                  0
                ],
                "docs": [
                  " Voters in the current block thus far"
                ]
              },
              {
                "name": "PotEntropy",
                "modifier": "Default",
                "ty": {
                  "Plain": 115
                },
                "default": [
                  0
                ],
                "docs": [
                  " Entropy that needs to be injected into proof of time chain at specific slot associated with",
                  " block number it came from."
                ]
              },
              {
                "name": "BlockRandomness",
                "modifier": "Optional",
                "ty": {
                  "Plain": 120
                },
                "default": [
                  0
                ],
                "docs": [
                  " The current block randomness, updated at block initialization. When the proof of time feature",
                  " is enabled it derived from PoT otherwise PoR."
                ]
              },
              {
                "name": "AllowAuthoringByAnyone",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Allow block authoring by anyone or just root."
                ]
              },
              {
                "name": "RootPlotPublicKey",
                "modifier": "Optional",
                "ty": {
                  "Plain": 38
                },
                "default": [
                  0
                ],
                "docs": [
                  " Root plot public key.",
                  "",
                  " Set just once to make sure no one else can author blocks until allowed for anyone."
                ]
              }
            ]
          },
          "calls": {
            "ty": 121
          },
          "event": {
            "ty": 31
          },
          "constants": [
            {
              "name": "BlockAuthoringDelay",
              "ty": 55,
              "value": [
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of slots between slot arrival and when corresponding block can be produced.",
                "",
                " Practically this means future proof of time proof needs to be revealed this many slots",
                " ahead before block can be authored even though solution is available before that."
              ]
            },
            {
              "name": "PotEntropyInjectionInterval",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " Interval, in blocks, between blockchain entropy injection into proof of time chain."
              ]
            },
            {
              "name": "PotEntropyInjectionLookbackDepth",
              "ty": 2,
              "value": [
                2
              ],
              "docs": [
                " Interval, in entropy injection intervals, where to take entropy for injection from."
              ]
            },
            {
              "name": "PotEntropyInjectionDelay",
              "ty": 55,
              "value": [
                15,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Delay after block, in slots, when entropy injection takes effect."
              ]
            },
            {
              "name": "EraDuration",
              "ty": 4,
              "value": [
                224,
                7,
                0,
                0
              ],
              "docs": [
                " The amount of time, in blocks, that each era should last.",
                " NOTE: Currently it is not possible to change the era duration after",
                " the chain has started. Attempting to do so will brick block production."
              ]
            },
            {
              "name": "InitialSolutionRange",
              "ty": 11,
              "value": [
                165,
                226,
                236,
                195,
                103,
                216,
                21,
                0
              ],
              "docs": [
                " Initial solution range used for challenges during the very first era."
              ]
            },
            {
              "name": "SlotProbability",
              "ty": 137,
              "value": [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How often in slots slots (on average, not counting collisions) will have a block.",
                "",
                " Expressed as a rational where the first member of the tuple is the",
                " numerator and the second is the denominator. The rational should",
                " represent a value between 0 and 1."
              ]
            },
            {
              "name": "ConfirmationDepthK",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Depth `K` after which a block enters the recorded history (a global constant, as opposed",
                " to the client-dependent transaction confirmation depth `k`)."
              ]
            },
            {
              "name": "RecentSegments",
              "ty": 128,
              "value": [
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Number of latest archived segments that are considered \"recent history\"."
              ]
            },
            {
              "name": "RecentHistoryFraction",
              "ty": 138,
              "value": [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                10,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Fraction of pieces from the \"recent history\" (`recent_segments`) in each sector."
              ]
            },
            {
              "name": "MinSectorLifetime",
              "ty": 128,
              "value": [
                4,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum lifetime of a plotted sector, measured in archived segment."
              ]
            },
            {
              "name": "ExpectedVotesPerBlock",
              "ty": 4,
              "value": [
                9,
                0,
                0,
                0
              ],
              "docs": [
                " Number of votes expected per block.",
                "",
                " This impacts solution range for votes in consensus."
              ]
            },
            {
              "name": "MaxPiecesInSector",
              "ty": 92,
              "value": [
                232,
                3
              ],
              "docs": [
                " How many pieces one sector is supposed to contain (max)"
              ]
            },
            {
              "name": "BlockSlotCount",
              "ty": 4,
              "value": [
                6,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block slot mappings to keep (oldest pruned first)."
              ]
            }
          ],
          "error": {
            "ty": 139
          },
          "index": 2,
          "docs": []
        },
        {
          "name": "OffencesSubspace",
          "storage": {
            "prefix": "OffencesSubspace",
            "entries": [
              {
                "name": "Reports",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 12,
                    "value": 140
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The primary structure that holds all offence records keyed by report identifiers."
                ]
              },
              {
                "name": "ConcurrentReportsIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat",
                      "Twox64Concat"
                    ],
                    "key": 141,
                    "value": 69
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A vector of reports of the same kind that happened at the same time slot."
                ]
              },
              {
                "name": "ReportsByKindIndex",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 41,
                    "value": 13
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Enumerates all reports of a kind along with the time they happened.",
                  "",
                  " All reports are sorted by the time of offence.",
                  "",
                  " Note that the actual type of this mapping is `Vec<u8>`, this is because values of",
                  " different types are not supported at the moment so we are doing the manual serialization."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 40
          },
          "constants": [],
          "error": null,
          "index": 3,
          "docs": []
        },
        {
          "name": "Rewards",
          "storage": {
            "prefix": "Rewards",
            "entries": [
              {
                "name": "AvgBlockspaceUsage",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Utilization of blockspace (in bytes) by the normal extrinsics used to adjust issuance"
                ]
              },
              {
                "name": "RewardsEnabled",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether rewards are enabled"
                ]
              },
              {
                "name": "RemainingIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tokens left to issue to farmers at any given time"
                ]
              },
              {
                "name": "ProposerSubsidyPoints",
                "modifier": "Default",
                "ty": {
                  "Plain": 142
                },
                "default": [
                  0
                ],
                "docs": [
                  " Block proposer subsidy parameters"
                ]
              },
              {
                "name": "VoterSubsidyPoints",
                "modifier": "Default",
                "ty": {
                  "Plain": 142
                },
                "default": [
                  0
                ],
                "docs": [
                  " Voter subsidy parameters"
                ]
              }
            ]
          },
          "calls": {
            "ty": 145
          },
          "event": {
            "ty": 42
          },
          "constants": [
            {
              "name": "AvgBlockspaceUsageNumBlocks",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Number of blocks over which to compute average blockspace usage"
              ]
            },
            {
              "name": "TransactionByteFee",
              "ty": 6,
              "value": [
                5,
                6,
                61,
                152,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Cost of one byte of blockspace"
              ]
            },
            {
              "name": "MaxRewardPoints",
              "ty": 4,
              "value": [
                20,
                0,
                0,
                0
              ],
              "docs": [
                " Max number of reward points"
              ]
            },
            {
              "name": "ProposerTaxOnVotes",
              "ty": 71,
              "value": [
                1,
                0,
                0,
                0,
                10,
                0,
                0,
                0
              ],
              "docs": [
                " Tax of the proposer on vote rewards"
              ]
            }
          ],
          "error": null,
          "index": 4,
          "docs": []
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  128
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 146
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 150
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              },
              {
                "name": "Holds",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 153
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Holds on account balances."
                ]
              },
              {
                "name": "Freezes",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 161
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Freeze locks on account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 164
          },
          "event": {
            "ty": 43
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open. MUST BE GREATER THAN ZERO!",
                "",
                " If you *really* need it to be zero, you can enable the feature `insecure_zero_ed` for",
                " this pallet. However, you do so at your own risk: this will open up a major DoS vector.",
                " In case you have multiple sources of provider references, you may also get unexpected",
                " behaviour if you set this to zero.",
                "",
                " Bottom line: Do yourself a favour and make it at least one!"
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            },
            {
              "name": "MaxHolds",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of holds that can exist on an account at any time."
              ]
            },
            {
              "name": "MaxFreezes",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of individual freeze locks that can exist on an account at any time."
              ]
            }
          ],
          "error": {
            "ty": 169
          },
          "index": 5,
          "docs": []
        },
        {
          "name": "TransactionFees",
          "storage": {
            "prefix": "TransactionFees",
            "entries": [
              {
                "name": "TransactionByteFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 170
                },
                "default": [
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255,
                  255
                ],
                "docs": [
                  " The value of `transaction_byte_fee` for both the current and the next block.",
                  "",
                  " The `next` value of `transaction_byte_fee` is updated at block finalization and used to",
                  " validate extrinsic to be included in the next block, the value is move to `current` at",
                  " block initialization and used to execute extrinsic in the current block. Together it",
                  " ensure we use the same value for both validating and executing the extrinsic.",
                  "",
                  " NOTE: both the `current` and `next` value is set to the default `Balance::max_value` in",
                  " the genesis block which means there will be no signed extrinsic included in block #1."
                ]
              },
              {
                "name": "IsDuringBlockExecution",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) used to determine if the `transaction_byte_fee`",
                  " is used to validate extrinsic or execute extrinsic."
                ]
              },
              {
                "name": "BlockAuthor",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) which contains current block author, so we",
                  " can issue fees during block finalization."
                ]
              },
              {
                "name": "CollectedBlockFees",
                "modifier": "Optional",
                "ty": {
                  "Plain": 171
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary value (cleared at block finalization) which contains current block fees, so we can",
                  " issue fees during block finalization."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 45
          },
          "constants": [
            {
              "name": "MinReplicationFactor",
              "ty": 92,
              "value": [
                50,
                0
              ],
              "docs": [
                " Minimum desired number of replicas of the blockchain to be stored by the network,",
                " impacts storage fees."
              ]
            },
            {
              "name": "CreditSupply",
              "ty": 6,
              "value": [
                147,
                46,
                104,
                198,
                45,
                151,
                201,
                159,
                210,
                148,
                7,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How many credits there is in circulation."
              ]
            },
            {
              "name": "TotalSpacePledged",
              "ty": 6,
              "value": [
                0,
                175,
                222,
                159,
                204,
                183,
                237,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How much space there is on the network."
              ]
            },
            {
              "name": "BlockchainHistorySize",
              "ty": 6,
              "value": [
                0,
                224,
                85,
                80,
                14,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " How big is the history of the blockchain in archived state (thus includes erasure",
                " coding, but not replication)."
              ]
            }
          ],
          "error": null,
          "index": 6,
          "docs": []
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 172
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 173
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 46
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 7,
          "docs": []
        },
        {
          "name": "Utility",
          "storage": null,
          "calls": {
            "ty": 174
          },
          "event": {
            "ty": 47
          },
          "constants": [
            {
              "name": "batched_calls_limit",
              "ty": 4,
              "value": [
                170,
                42,
                0,
                0
              ],
              "docs": [
                " The limit on the number of batched calls."
              ]
            }
          ],
          "error": {
            "ty": 251
          },
          "index": 8,
          "docs": []
        },
        {
          "name": "Domains",
          "storage": {
            "prefix": "Domains",
            "entries": [
              {
                "name": "SuccessfulBundles",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 69
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Bundles submitted successfully in current block."
                ]
              },
              {
                "name": "SuccessfulFraudProofs",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 69
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Fraud proofs submitted successfully in current block."
                ]
              },
              {
                "name": "NextRuntimeId",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Stores the next runtime id."
                ]
              },
              {
                "name": "NextEVMChainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  16,
                  122,
                  7,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Stores the next evm chain id."
                ]
              },
              {
                "name": "RuntimeRegistry",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 4,
                    "value": 252
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "ScheduledRuntimeUpgrades",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 71,
                    "value": 262
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "NextOperatorId",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "OperatorIdOwner",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 0
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OperatorSigningKey",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 219,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Indexes operator signing key against OperatorId."
                ]
              },
              {
                "name": "DomainStakingSummary",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 263
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Operators",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 268
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all registered operators and their configuration."
                ]
              },
              {
                "name": "PendingOperatorSwitches",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 267
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Temporary hold of all the operators who decided to switch to another domain.",
                  " Once epoch is complete, these operators are added to new domains under next_operators."
                ]
              },
              {
                "name": "OperatorEpochSharePrice",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 272,
                    "value": 273
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Share price for the operator pool at the end of Domain epoch."
                ]
              },
              {
                "name": "Deposits",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 275,
                    "value": 276
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all deposits for given Operator."
                ]
              },
              {
                "name": "Withdrawals",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 275,
                    "value": 280
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all withdrawals for a given operator."
                ]
              },
              {
                "name": "NominatorCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Tracks the nominator count under given operator.",
                  " This storage is necessary since CountedStorageNMap does not support prefix key count, so",
                  " cannot use that storage type for `Nominators` storage.",
                  " Note: The count is incremented for new nominators and decremented when the nominator withdraws",
                  " all the stake.",
                  " Since Operator themselves are first nominator, they are not counted."
                ]
              },
              {
                "name": "PendingSlashes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 267
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A list operators who were slashed during the current epoch associated with the domain.",
                  " When the epoch for a given domain is complete, operator total stake is moved to treasury and",
                  " then deleted."
                ]
              },
              {
                "name": "PendingStakingOperationCount",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The pending staking operation count of the current epoch, it should not larger than",
                  " `MaxPendingStakingOperation` and will be resetted to 0 upon epoch transition."
                ]
              },
              {
                "name": "NextDomainId",
                "modifier": "Default",
                "ty": {
                  "Plain": 51
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Stores the next domain id."
                ]
              },
              {
                "name": "DomainRegistry",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 285
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The domain registry"
                ]
              },
              {
                "name": "BlockTree",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 287,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The domain block tree, map (`domain_id`, `domain_block_number`) to the hash of ER,",
                  " which can be used get the block tree node in `BlockTreeNodes`"
                ]
              },
              {
                "name": "BlockTreeNodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 288
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of block tree node hash to the node, each node represent a domain block"
                ]
              },
              {
                "name": "HeadReceiptNumber",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The head receipt number of each domain"
                ]
              },
              {
                "name": "HeadReceiptExtended",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 30
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether the head receipt have extended in the current consensus block",
                  "",
                  " Temporary storage only exist during block execution"
                ]
              },
              {
                "name": "ConsensusBlockHash",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 287,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " The consensus block hash used to verify ER,",
                  " only store the consensus block hash for a domain",
                  " if that consensus block contains bundle of the domain, the hash will be pruned when the ER",
                  " that point to the consensus block is pruned.",
                  "",
                  " TODO: this storage is unbounded in some cases, see https://github.com/subspace/subspace/issues/1673",
                  " for more details, this will be fixed once https://github.com/subspace/subspace/issues/1731 is implemented."
                ]
              },
              {
                "name": "ExecutionInbox",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity",
                      "Identity"
                    ],
                    "key": 289,
                    "value": 290
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A set of `BundleDigest` from all bundles that successfully submitted to the consensus block,",
                  " these bundles will be used to construct the domain block and `ExecutionInbox` is used to:",
                  "",
                  " 1. Ensure subsequent ERs of that domain block include all pre-validated extrinsic bundles",
                  " 2. Index the `InboxedBundleAuthor` and pruned its value when the corresponding `ExecutionInbox` is pruned"
                ]
              },
              {
                "name": "InboxedBundleAuthor",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 12,
                    "value": 11
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping of `bundle_header_hash` -> `bundle_author` for all the successfully submitted bundles of",
                  " the last `BlockTreePruningDepth` domain blocks. Used to verify the invalid bundle fraud proof and",
                  " slash malicious operator who have submitted invalid bundle."
                ]
              },
              {
                "name": "HeadDomainNumber",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The block number of the best domain block, increase by one when the first bundle of the domain is",
                  " successfully submitted to current consensus block, which mean a new domain block with this block",
                  " number will be produce. Used as a pointer in `ExecutionInbox` to identify the current under building",
                  " domain block, also used as a mapping of consensus block number to domain block number."
                ]
              },
              {
                "name": "LastEpochStakingDistribution",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 292
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage to hold any previous epoch details for a given domain",
                  " if the epoch transitioned in this block so that all the submitted bundles",
                  " within this block are verified.",
                  " TODO: The storage is cleared on block finalization that means this storage is already cleared when",
                  " verifying the `submit_bundle` extrinsic and not used at all"
                ]
              },
              {
                "name": "LatestConfirmedDomainBlock",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 293
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Storage to hold all the domain's latest confirmed block."
                ]
              },
              {
                "name": "LatestSubmittedER",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 294,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The latest ER submitted by the operator for a given domain. It is used to determine if the operator",
                  " has submitted bad ER and is pending to slash.",
                  "",
                  " The storage item of a given `(domain_id, operator_id)` will be pruned after either:",
                  " - All the ERs submitted by the operator for this domain are confirmed and pruned",
                  " - All the bad ERs submitted by the operator for this domain are pruned and the operator is slashed"
                ]
              },
              {
                "name": "DomainTxRangeState",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 295
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 177
          },
          "event": {
            "ty": 50
          },
          "constants": [
            {
              "name": "ConfirmationDepthK",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Same with `pallet_subspace::Config::ConfirmationDepthK`."
              ]
            },
            {
              "name": "DomainRuntimeUpgradeDelay",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " Delay before a domain runtime is upgraded."
              ]
            },
            {
              "name": "BlockTreePruningDepth",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " The block tree pruning depth."
              ]
            },
            {
              "name": "ConsensusSlotProbability",
              "ty": 137,
              "value": [
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                6,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Consensus chain slot probability."
              ]
            },
            {
              "name": "MaxDomainBlockSize",
              "ty": 4,
              "value": [
                0,
                0,
                60,
                0
              ],
              "docs": [
                " The maximum block size limit for all domain."
              ]
            },
            {
              "name": "MaxDomainBlockWeight",
              "ty": 9,
              "value": [
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191
              ],
              "docs": [
                " The maximum block weight limit for all domain."
              ]
            },
            {
              "name": "MaxBundlesPerBlock",
              "ty": 4,
              "value": [
                10,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum bundle per block limit for all domain."
              ]
            },
            {
              "name": "MaxDomainNameLength",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum domain name length limit for all domain."
              ]
            },
            {
              "name": "DomainInstantiationDeposit",
              "ty": 6,
              "value": [
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The amount of fund to be locked up for the domain instance creator."
              ]
            },
            {
              "name": "InitialDomainTxRange",
              "ty": 11,
              "value": [
                3,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Initial domain tx range value."
              ]
            },
            {
              "name": "DomainTxRangeAdjustmentInterval",
              "ty": 11,
              "value": [
                100,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Domain tx range is adjusted after every DomainTxRangeAdjustmentInterval blocks."
              ]
            },
            {
              "name": "MinOperatorStake",
              "ty": 6,
              "value": [
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum operator stake required to become operator of a domain."
              ]
            },
            {
              "name": "MinNominatorStake",
              "ty": 6,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Minimum nominator stake required to nominate and operator."
              ]
            },
            {
              "name": "StakeWithdrawalLockingPeriod",
              "ty": 4,
              "value": [
                64,
                56,
                0,
                0
              ],
              "docs": [
                " Minimum number of blocks after which any finalized withdrawals are released to nominators."
              ]
            },
            {
              "name": "StakeEpochDuration",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Domain epoch transition interval"
              ]
            },
            {
              "name": "TreasuryAccount",
              "ty": 0,
              "value": [
                109,
                111,
                100,
                108,
                116,
                114,
                101,
                97,
                115,
                117,
                114,
                121,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Treasury account."
              ]
            },
            {
              "name": "MaxPendingStakingOperation",
              "ty": 4,
              "value": [
                0,
                2,
                0,
                0
              ],
              "docs": [
                " The maximum number of pending staking operation that can perform upon epoch transition."
              ]
            },
            {
              "name": "MaxNominators",
              "ty": 4,
              "value": [
                0,
                1,
                0,
                0
              ],
              "docs": [
                " The maximum number of nominators for given operator."
              ]
            },
            {
              "name": "SudoId",
              "ty": 0,
              "value": [
                58,
                36,
                65,
                231,
                149,
                99,
                158,
                9,
                163,
                59,
                245,
                17,
                153,
                19,
                45,
                126,
                225,
                11,
                155,
                103,
                235,
                219,
                28,
                163,
                11,
                20,
                84,
                76,
                144,
                1,
                143,
                126
              ],
              "docs": [
                " The sudo account id"
              ]
            },
            {
              "name": "PalletId",
              "ty": 298,
              "value": [
                100,
                111,
                109,
                97,
                105,
                110,
                115,
                95
              ],
              "docs": [
                " The pallet-domains's pallet id."
              ]
            },
            {
              "name": "BundleLongevity",
              "ty": 4,
              "value": [
                5,
                0,
                0,
                0
              ],
              "docs": [
                " How many block a bundle should still consider as valid after produced"
              ]
            }
          ],
          "error": {
            "ty": 299
          },
          "index": 12,
          "docs": []
        },
        {
          "name": "RuntimeConfigs",
          "storage": {
            "prefix": "RuntimeConfigs",
            "entries": [
              {
                "name": "EnableDomains",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether to enable calls in pallet-domains."
                ]
              },
              {
                "name": "EnableDynamicCostOfStorage",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether to enable dynamic cost of storage."
                ]
              },
              {
                "name": "EnableBalanceTransfers",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether to enable balances transfers."
                ]
              },
              {
                "name": "EnableNonRootCalls",
                "modifier": "Default",
                "ty": {
                  "Plain": 30
                },
                "default": [
                  0
                ],
                "docs": [
                  " Whether to enable calls from non-root account."
                ]
              },
              {
                "name": "ConfirmationDepthK",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 227
          },
          "event": null,
          "constants": [],
          "error": null,
          "index": 14,
          "docs": []
        },
        {
          "name": "Vesting",
          "storage": {
            "prefix": "Vesting",
            "entries": [
              {
                "name": "VestingSchedules",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 307
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Vesting schedules of an account.",
                  "",
                  " VestingSchedules: map AccountId => Vec<VestingSchedule>"
                ]
              }
            ]
          },
          "calls": {
            "ty": 228
          },
          "event": {
            "ty": 56
          },
          "constants": [
            {
              "name": "MinVestedTransfer",
              "ty": 6,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount transferred to call `vested_transfer`."
              ]
            }
          ],
          "error": {
            "ty": 308
          },
          "index": 13,
          "docs": []
        },
        {
          "name": "Mmr",
          "storage": {
            "prefix": "Mmr",
            "entries": [
              {
                "name": "RootHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Latest MMR Root hash."
                ]
              },
              {
                "name": "NumberOfLeaves",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current size of the MMR (number of leaves)."
                ]
              },
              {
                "name": "Nodes",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 11,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Hashes of the nodes in the MMR.",
                  "",
                  " Note this collection only contains MMR peaks, the inner nodes (and leaves)",
                  " are pruned and only stored in the Offchain DB."
                ]
              }
            ]
          },
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 30,
          "docs": []
        },
        {
          "name": "SubspaceMmr",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 31,
          "docs": []
        },
        {
          "name": "Messenger",
          "storage": {
            "prefix": "Messenger",
            "entries": [
              {
                "name": "NextChannelId",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 60,
                    "value": 61
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Stores the next channel id for a foreign chain."
                ]
              },
              {
                "name": "Channels",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 159,
                    "value": 309
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores channel config between two chains.",
                  " Key points to the foreign chain wrt own chain's storage name space"
                ]
              },
              {
                "name": "Inbox",
                "modifier": "Optional",
                "ty": {
                  "Plain": 312
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage for storing decoded inbox message between `pre_dispatch_relay_message`",
                  " and `relay_message`."
                ]
              },
              {
                "name": "InboxFee",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 320,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage of fees for executing an inbox message.",
                  " The storage is cleared when the acknowledgement of inbox response is received",
                  " from the src_chain."
                ]
              },
              {
                "name": "OutboxFee",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 320,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage of fees for executing an outbox message and its response from dst_chain.",
                  " The storage is cleared when src_chain receives the response from dst_chain."
                ]
              },
              {
                "name": "InboxResponses",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 321,
                    "value": 312
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the message responses of the incoming processed responses.",
                  " Used by the dst_chains to verify the message response."
                ]
              },
              {
                "name": "CounterForInboxResponses",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "Outbox",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 321,
                    "value": 312
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the outgoing messages that are awaiting message responses from the dst_chain.",
                  " Messages are processed in the outbox nonce order of chain's channel."
                ]
              },
              {
                "name": "CounterForOutbox",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  "Counter for the related counted storage map"
                ]
              },
              {
                "name": "OutboxResponses",
                "modifier": "Optional",
                "ty": {
                  "Plain": 312
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage for storing decoded outbox response message between `pre_dispatch_relay_message_response`",
                  " and `relay_message_response`."
                ]
              },
              {
                "name": "BlockMessages",
                "modifier": "Optional",
                "ty": {
                  "Plain": 322
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage to store all the messages to be relayed in this block.",
                  " Will be cleared on the initialization on next block."
                ]
              },
              {
                "name": "ChainAllowlist",
                "modifier": "Default",
                "ty": {
                  "Plain": 243
                },
                "default": [
                  0
                ],
                "docs": [
                  " An allowlist of chains that can open channel with this chain."
                ]
              },
              {
                "name": "DomainChainAllowlistUpdate",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 242
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A temporary storage to store any allowlist updates to domain.",
                  " Will be cleared in the next block once the previous block has a domain bundle."
                ]
              }
            ]
          },
          "calls": {
            "ty": 230
          },
          "event": {
            "ty": 59
          },
          "constants": [
            {
              "name": "ChannelReserveFee",
              "ty": 6,
              "value": [
                0,
                0,
                16,
                99,
                45,
                94,
                199,
                107,
                5,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Channel reserve fee to open a channel."
              ]
            }
          ],
          "error": {
            "ty": 325
          },
          "index": 60,
          "docs": []
        },
        {
          "name": "Transporter",
          "storage": {
            "prefix": "Transporter",
            "entries": [
              {
                "name": "OutgoingTransfers",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 320,
                    "value": 327
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " All the outgoing transfers on this execution environment."
                ]
              },
              {
                "name": "DomainBalances",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity"
                    ],
                    "key": 51,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Domain balances."
                ]
              },
              {
                "name": "ChainTransfers",
                "modifier": "Default",
                "ty": {
                  "Plain": 190
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " A temporary storage that tracks total transfers from this chain.",
                  " Clears on on_initialize for every block."
                ]
              },
              {
                "name": "UnconfirmedTransfers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 328,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Storage to track unconfirmed transfers between different chains."
                ]
              },
              {
                "name": "CancelledTransfers",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Identity",
                      "Identity"
                    ],
                    "key": 328,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Storage to track cancelled transfers between different chains."
                ]
              }
            ]
          },
          "calls": {
            "ty": 245
          },
          "event": {
            "ty": 64
          },
          "constants": [],
          "error": {
            "ty": 329
          },
          "index": 61,
          "docs": []
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 247
          },
          "event": {
            "ty": 66
          },
          "constants": [],
          "error": {
            "ty": 330
          },
          "index": 100,
          "docs": []
        }
      ],
      "extrinsic": {
        "version": 4,
        "address_ty": 165,
        "call_ty": 176,
        "signature_ty": 331,
        "extra_ty": 335,
        "signed_extensions": [
          {
            "identifier": "CheckNonZeroSender",
            "ty": 336,
            "additional_signed": 49
          },
          {
            "identifier": "CheckSpecVersion",
            "ty": 337,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 338,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 339,
            "additional_signed": 12
          },
          {
            "identifier": "CheckMortality",
            "ty": 340,
            "additional_signed": 12
          },
          {
            "identifier": "CheckNonce",
            "ty": 342,
            "additional_signed": 49
          },
          {
            "identifier": "CheckWeight",
            "ty": 343,
            "additional_signed": 49
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 344,
            "additional_signed": 49
          },
          {
            "identifier": "CheckStorageAccess",
            "ty": 345,
            "additional_signed": 49
          },
          {
            "identifier": "DisablePallets",
            "ty": 346,
            "additional_signed": 49
          }
        ]
      },
      "ty": 347,
      "apis": [
        {
          "name": "Core",
          "methods": [
            {
              "name": "version",
              "inputs": [],
              "output": 87,
              "docs": [
                " Returns the version of the runtime."
              ]
            },
            {
              "name": "execute_block",
              "inputs": [
                {
                  "name": "block",
                  "ty": 348
                }
              ],
              "output": 49,
              "docs": [
                " Execute the given block."
              ]
            },
            {
              "name": "initialize_block",
              "inputs": [
                {
                  "name": "header",
                  "ty": 123
                }
              ],
              "output": 49,
              "docs": [
                " Initialize a block with the given header."
              ]
            }
          ],
          "docs": [
            " The `Core` runtime api that every Substrate runtime needs to implement."
          ]
        },
        {
          "name": "Metadata",
          "methods": [
            {
              "name": "metadata",
              "inputs": [],
              "output": 351,
              "docs": [
                " Returns the metadata of a runtime."
              ]
            },
            {
              "name": "metadata_at_version",
              "inputs": [
                {
                  "name": "version",
                  "ty": 4
                }
              ],
              "output": 352,
              "docs": [
                " Returns the metadata at a given version.",
                "",
                " If the given `version` isn't supported, this will return `None`.",
                " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."
              ]
            },
            {
              "name": "metadata_versions",
              "inputs": [],
              "output": 353,
              "docs": [
                " Returns the supported metadata versions.",
                "",
                " This can be used to call `metadata_at_version`."
              ]
            }
          ],
          "docs": [
            " The `Metadata` api trait that returns metadata for the runtime."
          ]
        },
        {
          "name": "BlockBuilder",
          "methods": [
            {
              "name": "apply_extrinsic",
              "inputs": [
                {
                  "name": "extrinsic",
                  "ty": 349
                }
              ],
              "output": 354,
              "docs": [
                " Apply the given extrinsic.",
                "",
                " Returns an inclusion outcome which specifies if this extrinsic is included in",
                " this block or not."
              ]
            },
            {
              "name": "finalize_block",
              "inputs": [],
              "output": 123,
              "docs": [
                " Finish the current block."
              ]
            },
            {
              "name": "inherent_extrinsics",
              "inputs": [
                {
                  "name": "inherent",
                  "ty": 358
                }
              ],
              "output": 350,
              "docs": [
                " Generate inherent extrinsics. The inherent data will vary from chain to chain."
              ]
            },
            {
              "name": "check_inherents",
              "inputs": [
                {
                  "name": "block",
                  "ty": 348
                },
                {
                  "name": "data",
                  "ty": 358
                }
              ],
              "output": 362,
              "docs": [
                " Check that the inherents are valid. The inherent data will vary from chain to chain."
              ]
            }
          ],
          "docs": [
            " The `BlockBuilder` api trait that provides the required functionality for building a block."
          ]
        },
        {
          "name": "TaggedTransactionQueue",
          "methods": [
            {
              "name": "validate_transaction",
              "inputs": [
                {
                  "name": "source",
                  "ty": 363
                },
                {
                  "name": "tx",
                  "ty": 349
                },
                {
                  "name": "block_hash",
                  "ty": 12
                }
              ],
              "output": 364,
              "docs": [
                " Validate the transaction.",
                "",
                " This method is invoked by the transaction pool to learn details about given transaction.",
                " The implementation should make sure to verify the correctness of the transaction",
                " against current state. The given `block_hash` corresponds to the hash of the block",
                " that is used as current state.",
                "",
                " Note that this call may be performed by the pool multiple times and transactions",
                " might be verified in any possible order."
              ]
            }
          ],
          "docs": [
            " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."
          ]
        },
        {
          "name": "OffchainWorkerApi",
          "methods": [
            {
              "name": "offchain_worker",
              "inputs": [
                {
                  "name": "header",
                  "ty": 123
                }
              ],
              "output": 49,
              "docs": [
                " Starts the off-chain task for given block header."
              ]
            }
          ],
          "docs": [
            " The offchain worker api."
          ]
        },
        {
          "name": "ObjectsApi",
          "methods": [
            {
              "name": "validated_object_call_hashes",
              "inputs": [],
              "output": 69,
              "docs": [
                " Returns all the validated object call hashes for a given block"
              ]
            },
            {
              "name": "extract_block_object_mapping",
              "inputs": [
                {
                  "name": "block",
                  "ty": 348
                },
                {
                  "name": "validated_object_calls",
                  "ty": 69
                }
              ],
              "output": 366,
              "docs": [
                " Extract block object mapping for a given block"
              ]
            }
          ],
          "docs": []
        },
        {
          "name": "SubspaceApi",
          "methods": [
            {
              "name": "pot_parameters",
              "inputs": [],
              "output": 369,
              "docs": [
                " Proof of time parameters"
              ]
            },
            {
              "name": "solution_ranges",
              "inputs": [],
              "output": 100,
              "docs": [
                " Solution ranges."
              ]
            },
            {
              "name": "submit_report_equivocation_extrinsic",
              "inputs": [
                {
                  "name": "equivocation_proof",
                  "ty": 122
                }
              ],
              "output": 372,
              "docs": [
                " Submits an unsigned extrinsic to report an equivocation. The caller must provide the",
                " equivocation proof. The extrinsic will be unsigned and should only be accepted for local",
                " authorship (not to be broadcast to the network). This method returns `None` when",
                " creation of the extrinsic fails, e.g. if equivocation reporting is disabled for the",
                " given runtime (i.e. this method is hardcoded to return `None`). Only useful in an",
                " offchain context."
              ]
            },
            {
              "name": "submit_vote_extrinsic",
              "inputs": [
                {
                  "name": "signed_vote",
                  "ty": 373
                }
              ],
              "output": 49,
              "docs": [
                " Submit farmer vote vote that is essentially a header with bigger solution range than",
                " acceptable for block authoring. Only useful in an offchain context."
              ]
            },
            {
              "name": "is_in_block_list",
              "inputs": [
                {
                  "name": "farmer_public_key",
                  "ty": 38
                }
              ],
              "output": 30,
              "docs": [
                " Check if `farmer_public_key` is in block list (due to equivocation)"
              ]
            },
            {
              "name": "history_size",
              "inputs": [],
              "output": 128,
              "docs": [
                " Size of the blockchain history"
              ]
            },
            {
              "name": "max_pieces_in_sector",
              "inputs": [],
              "output": 92,
              "docs": [
                " How many pieces one sector is supposed to contain (max)"
              ]
            },
            {
              "name": "segment_commitment",
              "inputs": [
                {
                  "name": "segment_index",
                  "ty": 33
                }
              ],
              "output": 376,
              "docs": [
                " Get the segment commitment of records for specified segment index"
              ]
            },
            {
              "name": "extract_segment_headers",
              "inputs": [
                {
                  "name": "ext",
                  "ty": 349
                }
              ],
              "output": 377,
              "docs": [
                " Returns `Vec<SegmentHeader>` if a given extrinsic has them."
              ]
            },
            {
              "name": "is_inherent",
              "inputs": [
                {
                  "name": "ext",
                  "ty": 349
                }
              ],
              "output": 30,
              "docs": [
                " Checks if the extrinsic is an inherent."
              ]
            },
            {
              "name": "root_plot_public_key",
              "inputs": [],
              "output": 378,
              "docs": [
                " Returns root plot public key in case block authoring is restricted."
              ]
            },
            {
              "name": "should_adjust_solution_range",
              "inputs": [],
              "output": 30,
              "docs": [
                " Whether solution range adjustment is enabled."
              ]
            },
            {
              "name": "chain_constants",
              "inputs": [],
              "output": 379,
              "docs": [
                " Get Subspace blockchain constants"
              ]
            }
          ],
          "docs": [
            " API necessary for block authorship with Subspace."
          ]
        },
        {
          "name": "DomainsApi",
          "methods": [
            {
              "name": "submit_bundle_unsigned",
              "inputs": [
                {
                  "name": "opaque_bundle",
                  "ty": 178
                }
              ],
              "output": 49,
              "docs": [
                " Submits the transaction bundle via an unsigned extrinsic."
              ]
            },
            {
              "name": "extract_successful_bundles",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                },
                {
                  "name": "extrinsics",
                  "ty": 350
                }
              ],
              "output": 381,
              "docs": [
                " Extract the bundles stored successfully from the given extrinsics."
              ]
            },
            {
              "name": "extract_bundle",
              "inputs": [
                {
                  "name": "extrinsic",
                  "ty": 349
                }
              ],
              "output": 382,
              "docs": [
                " Extract bundle from the extrinsic if the extrinsic is `submit_bundle`."
              ]
            },
            {
              "name": "extract_receipts",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                },
                {
                  "name": "extrinsics",
                  "ty": 350
                }
              ],
              "output": 383,
              "docs": [
                " Extract the execution receipt stored successfully from the given extrinsics."
              ]
            },
            {
              "name": "extrinsics_shuffling_seed",
              "inputs": [],
              "output": 120,
              "docs": [
                " Generates a randomness seed for extrinsics shuffling."
              ]
            },
            {
              "name": "domain_runtime_code",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 212,
              "docs": [
                " Returns the WASM bundle for given `domain_id`."
              ]
            },
            {
              "name": "runtime_id",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 53,
              "docs": [
                " Returns the runtime id for given `domain_id`."
              ]
            },
            {
              "name": "domain_instance_data",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 384,
              "docs": [
                " Returns the domain instance data for given `domain_id`."
              ]
            },
            {
              "name": "timestamp",
              "inputs": [],
              "output": 11,
              "docs": [
                " Returns the current timestamp at given height."
              ]
            },
            {
              "name": "domain_tx_range",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 296,
              "docs": [
                " Returns the current Tx range for the given domain Id."
              ]
            },
            {
              "name": "genesis_state_root",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 387,
              "docs": [
                " Return the genesis state root if not pruned"
              ]
            },
            {
              "name": "head_receipt_number",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 4,
              "docs": [
                " Returns the best execution chain number."
              ]
            },
            {
              "name": "oldest_unconfirmed_receipt_number",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 53,
              "docs": [
                " Returns the block number of oldest unconfirmed execution receipt."
              ]
            },
            {
              "name": "domain_block_limit",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 388,
              "docs": [
                " Returns the domain block limit of the given domain."
              ]
            },
            {
              "name": "domain_bundle_limit",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 390,
              "docs": [
                " Returns the domain bundle limit of the given domain."
              ]
            },
            {
              "name": "non_empty_er_exists",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 30,
              "docs": [
                " Returns true if there are any ERs in the challenge period with non empty extrinsics."
              ]
            },
            {
              "name": "domain_best_number",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 53,
              "docs": [
                " Returns the current best number of the domain."
              ]
            },
            {
              "name": "execution_receipt",
              "inputs": [
                {
                  "name": "receipt_hash",
                  "ty": 12
                }
              ],
              "output": 392,
              "docs": [
                " Returns the execution receipt"
              ]
            },
            {
              "name": "domain_operators",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 393,
              "docs": [
                " Returns the current epoch and the next epoch operators of the given domain"
              ]
            },
            {
              "name": "operator_id_by_signing_key",
              "inputs": [
                {
                  "name": "signing_key",
                  "ty": 219
                }
              ],
              "output": 101,
              "docs": [
                " Get operator id by signing key"
              ]
            },
            {
              "name": "sudo_account_id",
              "inputs": [],
              "output": 0,
              "docs": [
                " Get the consensus chain sudo account id, currently only used in the intentional malicious operator"
              ]
            },
            {
              "name": "receipt_hash",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                },
                {
                  "name": "domain_number",
                  "ty": 4
                }
              ],
              "output": 387,
              "docs": [
                " Returns the execution receipt hash of the given domain and domain block number"
              ]
            },
            {
              "name": "consensus_chain_byte_fee",
              "inputs": [],
              "output": 6,
              "docs": [
                " Return the consensus chain byte fee that will used to charge the domain transaction for consensus",
                " chain storage fee"
              ]
            },
            {
              "name": "latest_confirmed_domain_block",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 395,
              "docs": [
                " Returns the latest confirmed domain block number and hash"
              ]
            },
            {
              "name": "is_bad_er_pending_to_prune",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                },
                {
                  "name": "receipt_hash",
                  "ty": 12
                }
              ],
              "output": 30,
              "docs": [
                " Return if the receipt is exist and pending to prune"
              ]
            }
          ],
          "docs": [
            " API necessary for domains pallet."
          ]
        },
        {
          "name": "BundleProducerElectionApi",
          "methods": [
            {
              "name": "bundle_producer_election_params",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 397,
              "docs": []
            },
            {
              "name": "operator",
              "inputs": [
                {
                  "name": "operator_id",
                  "ty": 11
                }
              ],
              "output": 399,
              "docs": []
            }
          ],
          "docs": []
        },
        {
          "name": "SessionKeys",
          "methods": [
            {
              "name": "generate_session_keys",
              "inputs": [
                {
                  "name": "seed",
                  "ty": 212
                }
              ],
              "output": 13,
              "docs": [
                " Generate a set of session keys with optionally using the given seed.",
                " The keys should be stored within the keystore exposed via runtime",
                " externalities.",
                "",
                " The seed needs to be a valid `utf8` string.",
                "",
                " Returns the concatenated SCALE encoded public keys."
              ]
            },
            {
              "name": "decode_session_keys",
              "inputs": [
                {
                  "name": "encoded",
                  "ty": 13
                }
              ],
              "output": 401,
              "docs": [
                " Decode the given public session keys.",
                "",
                " Returns the list of public raw public keys + key type."
              ]
            }
          ],
          "docs": [
            " Session keys runtime api."
          ]
        },
        {
          "name": "AccountNonceApi",
          "methods": [
            {
              "name": "account_nonce",
              "inputs": [
                {
                  "name": "account",
                  "ty": 0
                }
              ],
              "output": 4,
              "docs": [
                " Get current account nonce of given `AccountId`."
              ]
            }
          ],
          "docs": [
            " The API to query account nonce."
          ]
        },
        {
          "name": "TransactionPaymentApi",
          "methods": [
            {
              "name": "query_info",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 349
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 405,
              "docs": []
            },
            {
              "name": "query_fee_details",
              "inputs": [
                {
                  "name": "uxt",
                  "ty": 349
                },
                {
                  "name": "len",
                  "ty": 4
                }
              ],
              "output": 406,
              "docs": []
            },
            {
              "name": "query_weight_to_fee",
              "inputs": [
                {
                  "name": "weight",
                  "ty": 9
                }
              ],
              "output": 6,
              "docs": []
            },
            {
              "name": "query_length_to_fee",
              "inputs": [
                {
                  "name": "length",
                  "ty": 4
                }
              ],
              "output": 6,
              "docs": []
            }
          ],
          "docs": []
        },
        {
          "name": "MessengerApi",
          "methods": [
            {
              "name": "is_xdm_valid",
              "inputs": [
                {
                  "name": "extrinsic",
                  "ty": 13
                }
              ],
              "output": 409,
              "docs": [
                " Returns `Some(true)` if valid XDM or `Some(false)` if not",
                " Returns None if this is not an XDM"
              ]
            },
            {
              "name": "confirmed_domain_block_storage_key",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 13,
              "docs": [
                " Returns the confirmed domain block storage for given domain."
              ]
            },
            {
              "name": "outbox_storage_key",
              "inputs": [
                {
                  "name": "message_key",
                  "ty": 321
                }
              ],
              "output": 13,
              "docs": [
                " Returns storage key for outbox for a given message_id."
              ]
            },
            {
              "name": "inbox_response_storage_key",
              "inputs": [
                {
                  "name": "message_key",
                  "ty": 321
                }
              ],
              "output": 13,
              "docs": [
                " Returns storage key for inbox response for a given message_id."
              ]
            },
            {
              "name": "domain_chains_allowlist_update",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                }
              ],
              "output": 410,
              "docs": [
                " Returns any domain's chains allowlist updates on consensus chain."
              ]
            }
          ],
          "docs": [
            " Api to provide XDM extraction from Runtime Calls."
          ]
        },
        {
          "name": "RelayerApi",
          "methods": [
            {
              "name": "block_messages",
              "inputs": [],
              "output": 411,
              "docs": [
                " Returns all the outbox and inbox responses to deliver.",
                " Storage key is used to generate the storage proof for the message."
              ]
            },
            {
              "name": "outbox_message_unsigned",
              "inputs": [
                {
                  "name": "msg",
                  "ty": 233
                }
              ],
              "output": 414,
              "docs": [
                " Constructs an outbox message to the dst_chain as an unsigned extrinsic."
              ]
            },
            {
              "name": "inbox_response_message_unsigned",
              "inputs": [
                {
                  "name": "msg",
                  "ty": 233
                }
              ],
              "output": 414,
              "docs": [
                " Constructs an inbox response message to the dst_chain as an unsigned extrinsic."
              ]
            },
            {
              "name": "should_relay_outbox_message",
              "inputs": [
                {
                  "name": "dst_chain_id",
                  "ty": 60
                },
                {
                  "name": "msg_id",
                  "ty": 65
                }
              ],
              "output": 30,
              "docs": [
                " Returns true if the outbox message is ready to be relayed to dst_chain."
              ]
            },
            {
              "name": "should_relay_inbox_message_response",
              "inputs": [
                {
                  "name": "dst_chain_id",
                  "ty": 60
                },
                {
                  "name": "msg_id",
                  "ty": 65
                }
              ],
              "output": 30,
              "docs": [
                " Returns true if the inbox message response is ready to be relayed to dst_chain."
              ]
            }
          ],
          "docs": [
            " Api useful for relayers to fetch messages and submit transactions."
          ]
        },
        {
          "name": "FraudProofApi",
          "methods": [
            {
              "name": "submit_fraud_proof_unsigned",
              "inputs": [
                {
                  "name": "fraud_proof",
                  "ty": 196
                }
              ],
              "output": 49,
              "docs": [
                " Submit the fraud proof via an unsigned extrinsic."
              ]
            },
            {
              "name": "extract_fraud_proofs",
              "inputs": [
                {
                  "name": "domain_id",
                  "ty": 51
                },
                {
                  "name": "extrinsics",
                  "ty": 350
                }
              ],
              "output": 415,
              "docs": [
                " Extract the fraud proof handled successfully from the given extrinsics."
              ]
            }
          ],
          "docs": [
            " API necessary for fraud proof."
          ]
        },
        {
          "name": "MmrApi",
          "methods": [
            {
              "name": "mmr_root",
              "inputs": [],
              "output": 416,
              "docs": [
                " Return the on-chain MMR root hash."
              ]
            },
            {
              "name": "mmr_leaf_count",
              "inputs": [],
              "output": 418,
              "docs": [
                " Return the number of MMR blocks in the chain."
              ]
            },
            {
              "name": "generate_proof",
              "inputs": [
                {
                  "name": "block_numbers",
                  "ty": 353
                },
                {
                  "name": "best_known_block_number",
                  "ty": 53
                }
              ],
              "output": 419,
              "docs": [
                " Generate MMR proof for a series of block numbers. If `best_known_block_number = Some(n)`,",
                " use historical MMR state at given block height `n`. Else, use current MMR state."
              ]
            },
            {
              "name": "verify_proof",
              "inputs": [
                {
                  "name": "leaves",
                  "ty": 421
                },
                {
                  "name": "proof",
                  "ty": 237
                }
              ],
              "output": 422,
              "docs": [
                " Verify MMR proof against on-chain MMR for a batch of leaves.",
                "",
                " Note this function will use on-chain MMR root hash and check if the proof matches the hash.",
                " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
              ]
            },
            {
              "name": "verify_proof_stateless",
              "inputs": [
                {
                  "name": "root",
                  "ty": 12
                },
                {
                  "name": "leaves",
                  "ty": 421
                },
                {
                  "name": "proof",
                  "ty": 237
                }
              ],
              "output": 422,
              "docs": [
                " Verify MMR proof against given root hash for a batch of leaves.",
                "",
                " Note this function does not require any on-chain storage - the",
                " proof is verified against given MMR root hash.",
                "",
                " Note, the leaves should be sorted such that corresponding leaves and leaf indices have the",
                " same position in both the `leaves` vector and the `leaf_indices` vector contained in the [Proof]"
              ]
            }
          ],
          "docs": [
            " API to interact with MMR pallet."
          ]
        }
      ],
      "outer_enums": {
        "call_enum_ty": 176,
        "event_enum_ty": 20,
        "error_enum_ty": 423
      },
      "custom": {
        "map": {}
      }
    }
  }
]